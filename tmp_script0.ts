(function() {
  const img = document.querySelector(".mast img");
  const panel = document.querySelector(".search-panel");
  const tint = document.querySelector(".tint-box");
  if (!img || !panel || !tint) return;
  let ticking = false;
  const MIN_MT = 5;
  const MAX_MT = 180;
  function computeAndApply() {
    try {
      const imgRect = img.getBoundingClientRect();
      const tintRect = tint.getBoundingClientRect();
      const imageBottom = imgRect.bottom;
      const panelRect = panel.getBoundingClientRect();
      const computed = window.getComputedStyle(panel);
      const currentMargin = parseFloat(computed.marginTop) || 0;
      const scrollY = window.scrollY || window.pageYOffset || 0;
      const imageBottomDoc = Math.round(imgRect.bottom + scrollY);
      const parent = panel.parentElement || panel;
      const parentRect = parent.getBoundingClientRect();
      const parentTopDoc = Math.round(parentRect.top + scrollY);
      let desiredMarginTop = imageBottomDoc + 5 - parentTopDoc;
      desiredMarginTop = Math.max(MIN_MT, Math.min(MAX_MT, Math.round(desiredMarginTop)));
      panel.classList.remove("fixed");
      panel.style.position = "";
      panel.style.left = "";
      panel.style.top = "";
      panel.style.zIndex = "";
      panel.style.width = "";
      panel.style.transform = "";
      panel.style.marginTop = desiredMarginTop + "px";
      console.debug && console.debug("hero-position: imageBottomDoc", imageBottomDoc, "parentTopDoc", parentTopDoc, "desiredMarginTop", desiredMarginTop);
    } catch (err) {
      console.error("hero-position update failed", err);
    } finally {
      ticking = false;
    }
  }
  function update() {
    if (ticking) return;
    ticking = true;
    requestAnimationFrame(computeAndApply);
  }
  window.addEventListener("load", update);
  window.addEventListener("resize", update);
  window.addEventListener("scroll", update, { passive: true });
  setTimeout(update, 150);
})();

//# sourceMappingURL=data:application/json;base64,

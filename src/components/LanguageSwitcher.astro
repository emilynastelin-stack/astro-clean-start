---
// Language switcher component for managing language state
const currentLang = Astro.url.searchParams.get('lang') || 'en';
---

<script is:inline>
  // Language management functions
  window.LanguageManager = {
    currentLang: 'en',
    
    // Initialize language from localStorage or URL param
    init() {
      const urlLang = new URLSearchParams(window.location.search).get('lang');
      const storedLang = localStorage.getItem('selectedLanguage');
      
      // Priority: URL parameter > stored language > English default
      this.currentLang = urlLang || storedLang || 'en';
      
      // Ensure we always have a valid language (en, de, or ru)
      if (!['en', 'de', 'ru'].includes(this.currentLang)) {
        this.currentLang = 'en';
      }
      
      // Store the current language in localStorage for persistence
      localStorage.setItem('selectedLanguage', this.currentLang);
      
      console.log('LanguageManager initializing with:', this.currentLang);
      console.log('Language stored in localStorage:', localStorage.getItem('selectedLanguage'));
      
      // Update UI based on current language
      this.applyLanguage(this.currentLang);
      
      // Update language toggle button
      const toggleButton = document.getElementById('toggleButton');
      if (toggleButton) {
        toggleButton.textContent = this.currentLang.toUpperCase();
        console.log('Updated toggle button to:', this.currentLang.toUpperCase());
      } else {
        console.log('Toggle button not found during init');
      }
      
      console.log('Language initialized:', this.currentLang);
      
      // Set up mutation observer to handle dynamically added content
      this.setupMutationObserver();
    },
    
    // Set up observer to translate newly added elements
    setupMutationObserver() {
      const observer = new MutationObserver((mutations) => {
        let shouldRetranslate = false;
        mutations.forEach((mutation) => {
          if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
            // Check if any added nodes contain translatable elements
            mutation.addedNodes.forEach((node) => {
              if (node.nodeType === Node.ELEMENT_NODE) {
                const hasTranslateElements = node.querySelector && (
                  node.querySelector('[data-translate]') || 
                  node.matches && node.matches('[data-translate]')
                );
                if (hasTranslateElements) {
                  shouldRetranslate = true;
                }
              }
            });
          }
        });
        
        if (shouldRetranslate) {
          console.log('New translatable content detected, retranslating...');
          this.applyLanguage(this.currentLang);
        }
      });
      
      observer.observe(document.body, {
        childList: true,
        subtree: true
      });
    },
    
    // Switch to a new language
    switchLanguage(newLang) {
      console.log('Switching language from', this.currentLang, 'to', newLang);
      this.currentLang = newLang;
      localStorage.setItem('selectedLanguage', newLang);
      console.log('Language saved to localStorage:', newLang);
      
      // Update URL without reload
      const url = new URL(window.location);
      url.searchParams.set('lang', newLang);
      window.history.replaceState({}, '', url);
      
      // Apply the new language
      this.applyLanguage(newLang);
      
      // Update toggle button
      const toggleButton = document.getElementById('toggleButton');
      if (toggleButton) {
        toggleButton.textContent = newLang.toUpperCase();
        console.log('Updated toggle button to:', newLang.toUpperCase());
      } else {
        console.log('Toggle button not found during switch');
      }
      
      console.log('Language switched to:', newLang);
    },
    
    // Apply language to all elements with data-lang attributes
    applyLanguage(lang) {
      console.log('Applying language:', lang);
      
      // Hide all language-specific elements
      const langElements = document.querySelectorAll('[data-lang]');
      console.log('Found', langElements.length, 'elements with data-lang attribute');
      langElements.forEach(el => {
        el.style.display = 'none';
      });
      
      // Show elements for current language
      const currentLangElements = document.querySelectorAll(`[data-lang="${lang}"]`);
      console.log('Found', currentLangElements.length, 'elements for language', lang);
      currentLangElements.forEach(el => {
        el.style.display = 'block';
      });
      
      // Update text content for elements with language keys
      const translateElements = document.querySelectorAll('[data-translate]');
      console.log('Found', translateElements.length, 'elements to translate');
      translateElements.forEach(el => {
        const key = el.getAttribute('data-translate');
        const translation = this.getTranslation(key, lang);
        if (translation) {
          console.log('Translating', key, 'to:', translation);
          el.textContent = translation;
        } else {
          console.log('No translation found for key:', key);
        }
      });
      
      // Update placeholders
      const placeholderElements = document.querySelectorAll('[data-translate-placeholder]');
      console.log('Found', placeholderElements.length, 'placeholder elements to translate');
      placeholderElements.forEach(el => {
        const key = el.getAttribute('data-translate-placeholder');
        const translation = this.getTranslation(key, lang);
        if (translation) {
          console.log('Translating placeholder', key, 'to:', translation);
          el.placeholder = translation;
        }
      });
      
      // Update document language attribute
      document.documentElement.lang = lang === 'en' ? 'en' : lang === 'de' ? 'de' : 'ru';
      console.log('Set document language to:', document.documentElement.lang);
      
      // Dispatch language change event for other components
      document.dispatchEvent(new CustomEvent('languageChanged', { detail: { lang } }));
      
      // Force retranslation of composer details if they exist
      this.translateComposerDetails(lang);
    },
    
    // Translate composer detail panel specifically
    translateComposerDetails(lang) {
      // Translate country values
      const countryElements = document.querySelectorAll('.country-value');
      countryElements.forEach(el => {
        const country = el.getAttribute('data-country');
        if (country && country !== "—" && country !== "") {
          const countryMap = {
            'Russia': 'country.russia',
            'Ukraine': 'country.ukraine', 
            'Armenia': 'country.armenia',
            'Georgia': 'country.georgia',
            'Azerbaijan': 'country.azerbaijan',
            'Uzbekistan': 'country.uzbekistan',
            'Latvia': 'country.latvia',
            'Estonia': 'country.estonia',
            'Lithuania': 'country.lithuania',
            'Belarus': 'country.belarus',
            'Moldova': 'country.moldova',
            'Kyrgyzstan': 'country.kyrgyzstan',
            'Tajikistan': 'country.tajikistan',
            'Turkmenistan': 'country.turkmenistan',
            'Kazakhstan': 'country.kazakhstan'
          };
          
          const countryKey = countryMap[country];
          if (countryKey) {
            const translation = this.getTranslation(countryKey, lang);
            if (translation && translation !== countryKey) {
              el.textContent = translation;
            }
          }
        }
      });
      
      // Translate republic values
      const republicElements = document.querySelectorAll('.republic-value');
      republicElements.forEach(el => {
        const republic = el.getAttribute('data-republic');
        if (republic) {
          const republicMap = {
            'Armenian SSR': 'republic.armenian',
            'Azerbaijan SSR': 'republic.azerbaijan',
            'Byelorussian SSR': 'republic.byelorussian',
            'Estonian SSR': 'republic.estonian',
            'Georgian SSR': 'republic.georgian',
            'Kazakh SSR': 'republic.kazakh',
            'Kirghiz SSR': 'republic.kirghiz',
            'Latvian SSR': 'republic.latvian',
            'Lithuanian SSR': 'republic.lithuanian',
            'Moldavian SSR': 'republic.moldavian',
            'Russian SFSR': 'republic.russian',
            'Tajik SSR': 'republic.tajik',
            'Turkmen SSR': 'republic.turkmen',
            'Ukrainian SSR': 'republic.ukrainian',
            'Uzbek SSR': 'republic.uzbek'
          };
          
          const republicKey = republicMap[republic];
          if (republicKey) {
            const translation = this.getTranslation(republicKey, lang);
            if (translation && translation !== republicKey) {
              el.textContent = translation;
            }
          }
        }
      });
      
      // Translate gender values
      const genderElements = document.querySelectorAll('.gender-value');
      genderElements.forEach(el => {
        const gender = el.getAttribute('data-gender');
        if (gender && gender !== "—" && gender !== "") {
          const genderMap = {
            'Male': 'filter.male',
            'Female': 'filter.female'
          };
          
          const genderKey = genderMap[gender];
          if (genderKey) {
            const translation = this.getTranslation(genderKey, lang);
            if (translation && translation !== genderKey) {
              el.textContent = translation;
            }
          }
        }
      });
      
      // Update native language labels (currently just using Language field)
      const nativeLanguageElements = document.querySelectorAll('.native-language-label');
      console.log('Found native language elements:', nativeLanguageElements.length);
      nativeLanguageElements.forEach(el => {
        const languageName = el.dataset.language || '';
        console.log('Native language data:', languageName);
        
        // For now, just use the existing language name
        // TODO: Add German/Russian translations when columns are available
        if (languageName) {
          console.log('Setting native language label to:', languageName);
          el.textContent = languageName;
        }
      });
    },
    
    // Get translation for a key
    getTranslation(key, lang = this.currentLang) {
      const translations = {
        en: {
          'search.placeholder': 'Search for a composer...',
          'search.button': 'Search',
          'search.showAll': 'Show All',
          'nav.home': 'Home',
          'nav.about': 'About', 
          'nav.sources': 'Sources',
          'nav.submit': 'Submit',
          'filter.title': 'Filters',
          'filter.country': 'Country',
          'filter.republic': 'Soviet Republic',
          'filter.decade': 'Decade',
          'filter.pieceType': 'Type of Piece',
          'filter.type': 'Type',
          'filter.gender': 'Gender',
          'filter.instrumentation': 'Instrumentation',
          'filter.male': 'Male',
          'filter.female': 'Female',
          'filter.unaccompanied': 'Unaccompanied',
          'filter.trumpetPiano': 'Trumpet and piano',
          'filter.trumpetOrchestra': 'Trumpet and orchestra',
          'filter.trumpetDuet': 'Trumpet duet',
          'filter.mixedEnsemble': 'Mixed ensemble',
          'filter.scherzo': 'Scherzo',
          'filter.cornetSolo': 'Cornet solo',
          'filter.sonata': 'Sonata/Sonatina',
          'filter.concerto': 'Concerto/Concertino',
          'filter.poem': 'Poem',
          'filter.concertPiece': 'Concert Piece',
          'filter.fantasy': 'Fantasy/variations',
          'country.armenia': 'Armenia',
          'country.russia': 'Russia',
          'country.ukraine': 'Ukraine',
          'country.georgia': 'Georgia',
          'country.azerbaijan': 'Azerbaijan',
          'country.uzbekistan': 'Uzbekistan',
          'country.latvia': 'Latvia',
          'country.estonia': 'Estonia',
          'country.lithuania': 'Lithuania',
          'country.belarus': 'Belarus',
          'country.moldova': 'Moldova',
          'country.kyrgyzstan': 'Kyrgyzstan',
          'country.tajikistan': 'Tajikistan',
          'country.turkmenistan': 'Turkmenistan',
          'country.kazakhstan': 'Kazakhstan',
          'republic.armenian': 'Armenian SSR',
          'republic.azerbaijan': 'Azerbaijan SSR',
          'republic.byelorussian': 'Byelorussian SSR',
          'republic.estonian': 'Estonian SSR',
          'republic.georgian': 'Georgian SSR',
          'republic.kazakh': 'Kazakh SSR',
          'republic.kirghiz': 'Kirghiz SSR',
          'republic.latvian': 'Latvian SSR',
          'republic.lithuanian': 'Lithuanian SSR',
          'republic.moldavian': 'Moldavian SSR',
          'republic.russian': 'Russian SFSR',
          'republic.tajik': 'Tajik SSR',
          'republic.turkmen': 'Turkmen SSR',
          'republic.ukrainian': 'Ukrainian SSR',
          'republic.uzbek': 'Uzbek SSR',
          'composer.additionalInfo': 'Additional Info',
          'composer.russian': 'Russian',
          'composer.native': 'Native Language',
          'composer.country': 'Country',
          'composer.republic': 'Soviet Republic', 
          'composer.gender': 'Gender',
          'composer.notes': 'Notes',
          'composer.select': 'Select a piece or composer to see details here.',
          'results.title': 'Results',
          'results.noResults': 'No music found for selected filters.',
          'results.helpExpand': 'You can help by expanding it',
          'composer.details': 'Additional Info',
          'composer.select': 'Select a piece or composer to see more details here.',
          'footer.archive': 'Archive of Soviet Trumpet Music',
          'footer.copyright': '© 2025 Archive of Soviet Trumpet Music',
          'about.title': 'About the Archive of Soviet Trumpet Music',
          'about.upcoming': 'Upcoming Features',
          'about.contributions': 'Contributions',
          'about.technical': 'Technical Information',
          'sources.title': 'Sources & References',
          'sources.thanks': 'Special Thanks',
          'sources.bibliography': 'Bibliography',
          'submit.title': 'Contribute to the Archive',
          'submit.materials': 'Submit Materials',
          'submit.name': 'Your Name',
          'submit.email': 'Email Address',
          'submit.type': 'Type of Material',
          'submit.description': 'Description & Details',
          'submit.file': 'Upload File (optional)',
          'submit.button': 'Submit Contribution'
        },
        de: {
          'search.placeholder': 'Nach einem Komponisten suchen...',
          'search.button': 'Suchen',
          'search.showAll': 'Alle anzeigen',
          'nav.home': 'Startseite',
          'nav.about': 'Über uns',
          'nav.sources': 'Quellen',
          'nav.submit': 'Beitragen',
          'filter.title': 'Filter',
          'filter.country': 'Land',
          'filter.republic': 'Sowjetrepublik',
          'filter.decade': 'Jahrzehnt',
          'filter.pieceType': 'Stücktyp',
          'filter.type': 'Typ',
          'filter.gender': 'Geschlecht',
          'filter.instrumentation': 'Instrumentierung',
          'filter.male': 'Männlich',
          'filter.female': 'Weiblich',
          'filter.unaccompanied': 'Unbegleitet',
          'filter.trumpetPiano': 'Trompete und Klavier',
          'filter.trumpetOrchestra': 'Trompete und Orchester',
          'filter.trumpetDuet': 'Trompeten-Duett',
          'filter.mixedEnsemble': 'Gemischtes Ensemble',
          'filter.scherzo': 'Scherzo',
          'filter.cornetSolo': 'Kornett-Solo',
          'filter.sonata': 'Sonate/Sonatine',
          'filter.concerto': 'Konzert/Concertino',
          'filter.poem': 'Poem',
          'filter.concertPiece': 'Konzertstück',
          'filter.fantasy': 'Fantasie/Variationen',
          'country.armenia': 'Armenien',
          'country.russia': 'Russland',
          'country.ukraine': 'Ukraine',
          'country.georgia': 'Georgien',
          'country.azerbaijan': 'Aserbaidschan',
          'country.uzbekistan': 'Usbekistan',
          'country.latvia': 'Lettland',
          'country.estonia': 'Estland',
          'country.lithuania': 'Litauen',
          'country.belarus': 'Belarus',
          'country.moldova': 'Moldau',
          'country.kyrgyzstan': 'Kirgisistan',
          'country.tajikistan': 'Tadschikistan',
          'country.turkmenistan': 'Turkmenistan',
          'country.kazakhstan': 'Kasachstan',
          'republic.armenian': 'Armenische SSR',
          'republic.azerbaijan': 'Aserbaidschanische SSR',
          'republic.byelorussian': 'Weißrussische SSR',
          'republic.estonian': 'Estnische SSR',
          'republic.georgian': 'Georgische SSR',
          'republic.kazakh': 'Kasachische SSR',
          'republic.kirghiz': 'Kirgisische SSR',
          'republic.latvian': 'Lettische SSR',
          'republic.lithuanian': 'Litauische SSR',
          'republic.moldavian': 'Moldauische SSR',
          'republic.russian': 'Russische SFSR',
          'republic.tajik': 'Tadschikische SSR',
          'republic.turkmen': 'Turkmenische SSR',
          'republic.ukrainian': 'Ukrainische SSR',
          'republic.uzbek': 'Usbekische SSR',
          'composer.additionalInfo': 'Zusätzliche Informationen',
          'composer.russian': 'Russisch',
          'composer.native': 'Muttersprache',
          'composer.country': 'Land',
          'composer.republic': 'Sowjetrepublik',
          'composer.gender': 'Geschlecht',
          'composer.notes': 'Notizen',
          'composer.select': 'Wählen Sie ein Stück oder einen Komponisten aus, um weitere Details zu sehen.',
          'results.title': 'Ergebnisse',
          'results.noResults': 'Keine Musik für die ausgewählten Filter gefunden.',
          'results.helpExpand': 'Sie können helfen, indem Sie es erweitern',
          'composer.details': 'Zusätzliche Informationen',
          'composer.select': 'Wählen Sie ein Stück oder einen Komponisten aus, um weitere Details zu sehen.',
          'footer.archive': 'Archiv der sowjetischen Trompetenmusik',
          'footer.copyright': '© 2025 Archiv der sowjetischen Trompetenmusik',
          'about.title': 'Über das Archiv der sowjetischen Trompetenmusik',
          'about.upcoming': 'Kommende Funktionen',
          'about.contributions': 'Beiträge',
          'about.technical': 'Technische Informationen',
          'sources.title': 'Quellen & Referenzen',
          'sources.thanks': 'Besonderer Dank',
          'sources.bibliography': 'Bibliographie',
          'submit.title': 'Zum Archiv beitragen',
          'submit.materials': 'Materialien einreichen',
          'submit.name': 'Ihr Name',
          'submit.email': 'E-Mail-Adresse',
          'submit.type': 'Art des Materials',
          'submit.description': 'Beschreibung & Details',
          'submit.file': 'Datei hochladen (optional)',
          'submit.button': 'Beitrag einreichen'
        },
        ru: {
          'search.placeholder': 'Поиск композитора...',
          'search.button': 'Поиск',
          'search.showAll': 'Показать все',
          'nav.home': 'Главная',
          'nav.about': 'О проекте',
          'nav.sources': 'Источники', 
          'nav.submit': 'Добавить',
          'filter.title': 'Фильтры',
          'filter.country': 'Страна',
          'filter.republic': 'Советская республика',
          'filter.decade': 'Десятилетие',
          'filter.pieceType': 'Тип произведения',
          'filter.type': 'Тип',
          'filter.gender': 'Пол',
          'filter.instrumentation': 'Инструментовка',
          'filter.male': 'Мужской',
          'filter.female': 'Женский',
          'filter.unaccompanied': 'Без сопровождения',
          'filter.trumpetPiano': 'Труба и фортепиано',
          'filter.trumpetOrchestra': 'Труба и оркестр',
          'filter.trumpetDuet': 'Дуэт труб',
          'filter.mixedEnsemble': 'Смешанный ансамбль',
          'filter.scherzo': 'Скерцо',
          'filter.cornetSolo': 'Соло корнета',
          'filter.sonata': 'Соната/Сонатина',
          'filter.concerto': 'Концерт/Концертино',
          'filter.poem': 'Поэма',
          'filter.concertPiece': 'Концертная пьеса',
          'filter.fantasy': 'Фантазия/вариации',
          'country.armenia': 'Армения',
          'country.russia': 'Россия',
          'country.ukraine': 'Украина',
          'country.georgia': 'Грузия',
          'country.azerbaijan': 'Азербайджан',
          'country.uzbekistan': 'Узбекистан',
          'country.latvia': 'Латвия',
          'country.estonia': 'Эстония',
          'country.lithuania': 'Литва',
          'country.belarus': 'Беларусь',
          'country.moldova': 'Молдова',
          'country.kyrgyzstan': 'Кыргызстан',
          'country.tajikistan': 'Таджикистан',
          'country.turkmenistan': 'Туркменистан',
          'country.kazakhstan': 'Казахстан',
          'republic.armenian': 'Армянская ССР',
          'republic.azerbaijan': 'Азербайджанская ССР',
          'republic.byelorussian': 'Белорусская ССР',
          'republic.estonian': 'Эстонская ССР',
          'republic.georgian': 'Грузинская ССР',
          'republic.kazakh': 'Казахская ССР',
          'republic.kirghiz': 'Киргизская ССР',
          'republic.latvian': 'Латвийская ССР',
          'republic.lithuanian': 'Литовская ССР',
          'republic.moldavian': 'Молдавская ССР',
          'republic.russian': 'Российская СФСР',
          'republic.tajik': 'Таджикская ССР',
          'republic.turkmen': 'Туркменская ССР',
          'republic.ukrainian': 'Украинская ССР',
          'republic.uzbek': 'Узбекская ССР',
          'composer.additionalInfo': 'Дополнительная информация',
          'composer.russian': 'Русский',
          'composer.native': 'Родной язык',
          'composer.country': 'Страна',
          'composer.republic': 'Советская республика',
          'composer.gender': 'Пол',
          'composer.notes': 'Примечания',
          'composer.select': 'Выберите произведение или композитора, чтобы увидеть подробности.',
          'results.title': 'Результаты',
          'results.noResults': 'Музыка для выбранных фильтров не найдена.',
          'results.helpExpand': 'Вы можете помочь, расширив его',
          'composer.details': 'Дополнительная информация',
          'composer.select': 'Выберите произведение или композитора, чтобы увидеть подробности.',
          'footer.archive': 'Архив советской трубной музыки',
          'footer.copyright': '© 2025 Архив советской трубной музыки',
          'about.title': 'Об Архиве советской трубной музыки',
          'about.upcoming': 'Предстоящие функции',
          'about.contributions': 'Вклады',
          'about.technical': 'Техническая информация',
          'sources.title': 'Источники и ссылки',
          'sources.thanks': 'Особая благодарность',
          'sources.bibliography': 'Библиография',
          'submit.title': 'Внести вклад в архив',
          'submit.materials': 'Отправить материалы',
          'submit.name': 'Ваше имя',
          'submit.email': 'Адрес электронной почты',
          'submit.type': 'Тип материала',
          'submit.description': 'Описание и детали',
          'submit.file': 'Загрузить файл (необязательно)',
          'submit.button': 'Отправить вклад'
        }
      };
      
      return translations[lang] && translations[lang][key] || translations.en[key] || key;
    }
  };
  
  // Make LanguageManager available globally immediately
  console.log('LanguageManager script loaded, making globally available');
  
  // Initialize immediately and also when DOM is loaded
  console.log('LanguageManager script loaded');
  
  // Try to initialize immediately if DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      console.log('DOM loaded, initializing LanguageManager');
      window.LanguageManager.init();
    });
  } else {
    // DOM is already ready
    console.log('DOM already ready, initializing LanguageManager immediately');
    setTimeout(() => window.LanguageManager.init(), 100);
  }
</script>
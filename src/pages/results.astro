---
import MainLayout from '../layouts/MainLayout.astro';
import SongCard from '../components/SongCard.astro';

// Get search query from URL parameters - but this will be cleared client-side if it's a refresh
const searchQuery = Astro.url.searchParams.get('q') || '';
console.log('Server-side searchQuery:', searchQuery);
---

<MainLayout>
  <!-- Top Search Bar -->
  <div style="background-color: rgba(128,128,128,0.75); width:100%; box-shadow:0 2px 6px rgba(0,0,0,0.1);">
    <div style="display:flex; justify-content:center; align-items:center; height:60px; padding:0 1rem;">
      <form style="display:flex; gap:0.5rem; max-width:600px; width:100%;" action="/results" method="get">
        <input type="text" name="q" data-translate-placeholder="search.placeholder" placeholder="Search for a composer..." value={searchQuery}
               style="flex:1; padding:0.5rem 1rem; border-radius:8px; border:1px solid #ccc; font-size:1rem;" />
        <button type="submit"
                style="padding:0.5rem 1rem; border-radius:8px; border:none; background-color:#800000; color:white; font-size:1rem; cursor:pointer;"
                data-translate="search.button">
          Search
        </button>
        <a href="/results" id="show-all-btn"
           style="padding:0.5rem 1rem; border-radius:8px; border:none; background-color:#800000; color:white; text-decoration:none; font-size:1rem; display:inline-flex; align-items:center; justify-content:center; cursor:pointer;"
           data-translate="search.showAll">
          Show All
        </a>
      </form>
    </div>
  </div>

  <!-- Panels -->
  <main style="display:flex; gap:1rem; padding:2rem; align-items:stretch;">

    <!-- Left Panel: Filters -->
    <div class="left-panel" style="flex:0 0 400px; display:flex;">
      <div class="filter-panel" style="flex:1;">
        <h2 data-translate="filter.title">Filters</h2>
        
        <fieldset>
          <legend data-translate="filter.country">Country</legend>
          <label><input type="checkbox" name="Country" value="Armenia" /> <span data-translate="country.armenia">Armenia</span></label>
          <label><input type="checkbox" name="Country" value="Russia" /> <span data-translate="country.russia">Russia</span></label>
          <label><input type="checkbox" name="Country" value="Ukraine" /> <span data-translate="country.ukraine">Ukraine</span></label>
          <label><input type="checkbox" name="Country" value="Georgia" /> <span data-translate="country.georgia">Georgia</span></label>
          <label><input type="checkbox" name="Country" value="Azerbaijan" /> <span data-translate="country.azerbaijan">Azerbaijan</span></label>
          <label><input type="checkbox" name="Country" value="Uzbekistan" /> <span data-translate="country.uzbekistan">Uzbekistan</span></label>
          <label><input type="checkbox" name="Country" value="Latvia" /> <span data-translate="country.latvia">Latvia</span></label>
          <label><input type="checkbox" name="Country" value="Estonia" /> <span data-translate="country.estonia">Estonia</span></label>
          <label><input type="checkbox" name="Country" value="Lithuania" /> <span data-translate="country.lithuania">Lithuania</span></label>
          <label><input type="checkbox" name="Country" value="Belarus" /> <span data-translate="country.belarus">Belarus</span></label>
          <label><input type="checkbox" name="Country" value="Moldova" /> <span data-translate="country.moldova">Moldova</span></label>
          <label><input type="checkbox" name="Country" value="Kyrgyzstan" /> <span data-translate="country.kyrgyzstan">Kyrgyzstan</span></label>
          <label><input type="checkbox" name="Country" value="Tajikistan" /> <span data-translate="country.tajikistan">Tajikistan</span></label>
          <label><input type="checkbox" name="Country" value="Turkmenistan" /> <span data-translate="country.turkmenistan">Turkmenistan</span></label>
          <label><input type="checkbox" name="Country" value="Kazakhstan" /> <span data-translate="country.kazakhstan">Kazakhstan</span></label>
        </fieldset>
        <fieldset>
          <legend data-translate="filter.republic">Soviet Republic</legend>
          <label><input type="checkbox" name="Soviet republic" value="Armenian SSR" /> <span data-translate="republic.armenian">Armenian SSR</span></label>
          <label><input type="checkbox" name="Soviet republic" value="Azerbaijan SSR" /> <span data-translate="republic.azerbaijan">Azerbaijan SSR</span></label>
          <label><input type="checkbox" name="Soviet republic" value="Byelorussian SSR" /> <span data-translate="republic.byelorussian">Byelorussian SSR</span></label>
          <label><input type="checkbox" name="Soviet republic" value="Estonian SSR" /> <span data-translate="republic.estonian">Estonian SSR</span></label>
          <label><input type="checkbox" name="Soviet republic" value="Georgian SSR" /> <span data-translate="republic.georgian">Georgian SSR</span></label>
          <label><input type="checkbox" name="Soviet republic" value="Kazakh SSR" /> <span data-translate="republic.kazakh">Kazakh SSR</span></label>
          <label><input type="checkbox" name="Soviet republic" value="Kirghiz SSR" /> <span data-translate="republic.kirghiz">Kirghiz SSR</span></label>
          <label><input type="checkbox" name="Soviet republic" value="Latvian SSR" /> <span data-translate="republic.latvian">Latvian SSR</span></label>
          <label><input type="checkbox" name="Soviet republic" value="Lithuanian SSR" /> <span data-translate="republic.lithuanian">Lithuanian SSR</span></label>
          <label><input type="checkbox" name="Soviet republic" value="Moldavian SSR" /> <span data-translate="republic.moldavian">Moldavian SSR</span></label>
          <label><input type="checkbox" name="Soviet republic" value="Russian SFSR" /> <span data-translate="republic.russian">Russian SFSR</span></label>
          <label><input type="checkbox" name="Soviet republic" value="Tajik SSR" /> <span data-translate="republic.tajik">Tajik SSR</span></label>
          <label><input type="checkbox" name="Soviet republic" value="Turkmen SSR" /> <span data-translate="republic.turkmen">Turkmen SSR</span></label>
          <label><input type="checkbox" name="Soviet republic" value="Ukrainian SSR" /> <span data-translate="republic.ukrainian">Ukrainian SSR</span></label>
          <label><input type="checkbox" name="Soviet republic" value="Uzbek SSR" /> <span data-translate="republic.uzbek">Uzbek SSR</span></label>
        </fieldset>
        <fieldset>
          <legend data-translate="filter.gender">Gender</legend>
          <label><input type="checkbox" name="Gender" value="Male" /> <span data-translate="filter.male">Male</span></label>
          <label><input type="checkbox" name="Gender" value="Female" /> <span data-translate="filter.female">Female</span></label>
        </fieldset>
        <fieldset>
          <legend data-translate="filter.instrumentation">Instrumentation</legend>
          <label><input type="checkbox" name="Instrumentation" value="Unaccompanied" /> <span data-translate="filter.unaccompanied">Unaccompanied</span></label>
          <label><input type="checkbox" name="Instrumentation" value="Trumpet and Piano" /> <span data-translate="filter.trumpetPiano">Trumpet and Piano</span></label>
          <label><input type="checkbox" name="Instrumentation" value="Cornet Solo" /> <span data-translate="filter.cornetSolo">Cornet Solo</span></label>
          <label><input type="checkbox" name="Instrumentation" value="Piccolo Trumpet" /> <span data-translate="filter.piccoloTrumpet">Piccolo Trumpet</span></label>
          <label><input type="checkbox" name="Instrumentation" value="Trumpet Duet" /> <span data-translate="filter.trumpetDuet">Trumpet Duet</span></label>
          <label><input type="checkbox" name="Instrumentation" value="Trumpet and Orchestra" /> <span data-translate="filter.trumpetOrchestra">Trumpet and Orchestra</span></label>
          <label><input type="checkbox" name="Instrumentation" value="Trumpet and Wind Ensemble" /> <span data-translate="filter.trumpetWindEnsemble">Trumpet and Wind Ensemble</span></label>
          <label><input type="checkbox" name="Instrumentation" value="Trumpet and String Orchestra" /> <span data-translate="filter.trumpetStringOrchestra">Trumpet and String Orchestra</span></label>
          <label><input type="checkbox" name="Instrumentation" value="Trumpet and Brass Band" /> <span data-translate="filter.trumpetBrassBand">Trumpet and Brass Band</span></label>
          <label><input type="checkbox" name="Instrumentation" value="Trumpet Ensemble" /> <span data-translate="filter.trumpetEnsemble">Trumpet Ensemble</span></label>
          <label><input type="checkbox" name="Instrumentation" value="Mixed Ensemble" /> <span data-translate="filter.mixedEnsemble">Mixed Ensemble</span></label>
        </fieldset>
        <fieldset>
          <legend data-translate="filter.type">Type</legend>
          <label><input type="checkbox" name="Type" value="Scherzo" /> <span data-translate="filter.scherzo">Scherzo</span></label>
          <label><input type="checkbox" name="Type" value="Cornet solo" /> <span data-translate="filter.cornetSolo">Cornet solo</span></label>
          <label><input type="checkbox" name="Type" value="Sonata/Sonatina" /> <span data-translate="filter.sonata">Sonata/Sonatina</span></label>
          <label><input type="checkbox" name="Type" value="Concerto/Concertino" /> <span data-translate="filter.concerto">Concerto/Concertino</span></label>
          <label><input type="checkbox" name="Type" value="Poem" /> <span data-translate="filter.poem">Poem</span></label>
          <label><input type="checkbox" name="Type" value="Concert Piece" /> <span data-translate="filter.concertPiece">Concert Piece</span></label>
          <label><input type="checkbox" name="Type" value="Fantasy/variations" /> <span data-translate="filter.fantasy">Fantasy/variations</span></label>
        </fieldset>

      </div>
    </div>

    <!-- Center Panel: Results -->
    <div class="center-panel" style="flex:1; margin:0 1rem; display:flex;">
      <div style="background:white; border-radius:12px; padding:1.5rem; box-shadow:0 2px 6px rgba(0,0,0,0.1); flex:1;">
        <h3 style="margin-top:0; margin-bottom:1rem; color:#800000;" data-translate="results.title">Results</h3>
        <div id="results-list" style="display:flex; flex-direction:column; gap:1rem;">
          <p>Select filters to see composers.</p>
        </div>
      </div>
    </div>

    <!-- Right Panel: Composer Details -->
    <div class="right-panel" style="flex:0 0 400px; display:flex;">
      <div class="composer-details" style="flex:1;">
        <div class="composer-details-header" data-translate="composer.details">Additional Info</div>
        <div id="composer-details-content">
          <p data-translate="composer.select">Select a piece or composer to see more details here.</p>
        </div>
        
        <!-- Help text that moves based on content state -->
        <div id="help-text" style="margin-top: 1rem; color: #800000; font-size: 0.9rem; line-height: 1.4;">
          <a href="/submit" style="color: #800000; text-decoration: underline;" data-translate="composer.helpText">Help us improve—report any errors or share additional details</a>
        </div>
        
        <!-- Additional Information Box within the panel -->
        <div class="additional-info-box" id="composer-info-box" style="display: none;">
          <div class="additional-info-header" data-translate="composer.additional">
            Composer
          </div>
          <div id="additional-info-content">
            <p style="margin: 0.3rem 0; color: #666; font-size: 0.95rem;">Select a piece to see details about a composer.</p>
          </div>
        </div>
        
        <!-- Second Information Box -->
        <div class="additional-info-box" id="piece-info-box" style="display: none;">
          <div class="additional-info-header" data-translate="composer.secondary">
            Selected piece of music
          </div>
          <div id="secondary-info-content">
            <p style="margin: 0.3rem 0; color: #666; font-size: 0.95rem;">Select a piece to see more information.</p>
          </div>
        </div>
        
        <!-- Third Information Box -->
        <div class="additional-info-box" id="more-pieces-box" style="display: none;">
          <div class="additional-info-header" data-translate="composer.tertiary">
            More from this composer
          </div>
          <div id="tertiary-info-content">
            <p style="margin: 0.3rem 0; color: #666; font-size: 0.95rem;">Tertiary details will appear here.</p>
          </div>
        </div>
      </div>
    </div>

  </main>

  <!-- Mobile Composer Details Overlay -->
  <div id="mobile-overlay" class="mobile-overlay">
    <div class="mobile-overlay-content">
      <div class="mobile-overlay-header">
        <h3 data-translate="composer.details">Composer Details</h3>
        <button id="close-overlay" class="close-overlay">&times;</button>
      </div>
      <div id="mobile-composer-details" class="mobile-composer-details">
        <p>Select a composer to see details.</p>
        
        <!-- Mobile Composer Information Box -->
        <div class="additional-info-box mobile-info-box" id="mobile-composer-info-box" style="display: none; margin-top: 0;">
          <div class="additional-info-header" data-translate="composer.additional">
            Composer
          </div>
          <div id="mobile-additional-info-content">
            <p style="margin: 0.3rem 0; color: #666; font-size: 0.95rem;">Select a piece to see details about a composer.</p>
          </div>
        </div>
        
        <!-- Mobile Piece Information Box -->
        <div class="additional-info-box mobile-info-box" id="mobile-piece-info-box" style="display: none;">
          <div class="additional-info-header" data-translate="composer.secondary">
            Selected piece of music
          </div>
          <div id="mobile-secondary-info-content">
            <p style="margin: 0.3rem 0; color: #666; font-size: 0.95rem;">Select a piece to see more information.</p>
          </div>
        </div>
        
        <!-- Mobile More Pieces Box -->
        <div class="additional-info-box mobile-info-box" id="mobile-more-pieces-box" style="display: none;">
          <div class="additional-info-header" data-translate="composer.tertiary">
            More from this composer
          </div>
          <div id="mobile-tertiary-info-content">
            <p style="margin: 0.3rem 0; color: #666; font-size: 0.95rem;">Other pieces will appear here.</p>
          </div>
        </div>
        
        <!-- Mobile Help text -->
        <div id="mobile-help-text" style="margin-top: 1rem; color: #800000; font-size: 0.9rem; line-height: 1.4; display: none;">
          <a href="/submit" style="color: #800000; text-decoration: underline;" data-translate="composer.helpText">Help us improve—report any errors or share additional details</a>
        </div>
      </div>
    </div>
  </div>

  <!-- Mobile Toolbar -->
  <div id="mobile-toolbar" class="mobile-toolbar">
    <button id="mobile-filter-btn" class="mobile-toolbar-btn" data-translate="filter.title">
      Filter
    </button>
  </div>

  <!-- Mobile Filter Panel -->
  <div id="mobile-filter-panel" class="mobile-filter-panel">
    <div class="mobile-filter-content">
      <div class="mobile-filter-header">
        <h3 data-translate="filter.title">Filters</h3>
        <button id="close-filter-panel" class="close-filter-panel">&times;</button>
      </div>
      <div class="mobile-filter-body">
        <fieldset>
          <legend data-translate="filter.country">Country</legend>
          <label><input type="checkbox" name="Country" value="Armenia" class="mobile-filter-checkbox" /> <span data-translate="country.armenia">Armenia</span></label>
          <label><input type="checkbox" name="Country" value="Russia" class="mobile-filter-checkbox" /> <span data-translate="country.russia">Russia</span></label>
          <label><input type="checkbox" name="Country" value="Ukraine" class="mobile-filter-checkbox" /> <span data-translate="country.ukraine">Ukraine</span></label>
          <label><input type="checkbox" name="Country" value="Georgia" class="mobile-filter-checkbox" /> <span data-translate="country.georgia">Georgia</span></label>
          <label><input type="checkbox" name="Country" value="Azerbaijan" class="mobile-filter-checkbox" /> <span data-translate="country.azerbaijan">Azerbaijan</span></label>
          <label><input type="checkbox" name="Country" value="Uzbekistan" class="mobile-filter-checkbox" /> <span data-translate="country.uzbekistan">Uzbekistan</span></label>
          <label><input type="checkbox" name="Country" value="Latvia" class="mobile-filter-checkbox" /> <span data-translate="country.latvia">Latvia</span></label>
          <label><input type="checkbox" name="Country" value="Estonia" class="mobile-filter-checkbox" /> <span data-translate="country.estonia">Estonia</span></label>
          <label><input type="checkbox" name="Country" value="Lithuania" class="mobile-filter-checkbox" /> <span data-translate="country.lithuania">Lithuania</span></label>
          <label><input type="checkbox" name="Country" value="Belarus" class="mobile-filter-checkbox" /> <span data-translate="country.belarus">Belarus</span></label>
          <label><input type="checkbox" name="Country" value="Moldova" class="mobile-filter-checkbox" /> <span data-translate="country.moldova">Moldova</span></label>
          <label><input type="checkbox" name="Country" value="Kyrgyzstan" class="mobile-filter-checkbox" /> <span data-translate="country.kyrgyzstan">Kyrgyzstan</span></label>
          <label><input type="checkbox" name="Country" value="Tajikistan" class="mobile-filter-checkbox" /> <span data-translate="country.tajikistan">Tajikistan</span></label>
          <label><input type="checkbox" name="Country" value="Turkmenistan" class="mobile-filter-checkbox" /> <span data-translate="country.turkmenistan">Turkmenistan</span></label>
          <label><input type="checkbox" name="Country" value="Kazakhstan" class="mobile-filter-checkbox" /> <span data-translate="country.kazakhstan">Kazakhstan</span></label>
        </fieldset>
        <fieldset>
          <legend data-translate="filter.republic">Soviet Republic</legend>
          <label><input type="checkbox" name="Soviet republic" value="Armenian SSR" class="mobile-filter-checkbox" /> <span data-translate="republic.armenian">Armenian SSR</span></label>
          <label><input type="checkbox" name="Soviet republic" value="Azerbaijan SSR" class="mobile-filter-checkbox" /> <span data-translate="republic.azerbaijan">Azerbaijan SSR</span></label>
          <label><input type="checkbox" name="Soviet republic" value="Byelorussian SSR" class="mobile-filter-checkbox" /> <span data-translate="republic.byelorussian">Byelorussian SSR</span></label>
          <label><input type="checkbox" name="Soviet republic" value="Estonian SSR" class="mobile-filter-checkbox" /> <span data-translate="republic.estonian">Estonian SSR</span></label>
          <label><input type="checkbox" name="Soviet republic" value="Georgian SSR" class="mobile-filter-checkbox" /> <span data-translate="republic.georgian">Georgian SSR</span></label>
          <label><input type="checkbox" name="Soviet republic" value="Kazakh SSR" class="mobile-filter-checkbox" /> <span data-translate="republic.kazakh">Kazakh SSR</span></label>
          <label><input type="checkbox" name="Soviet republic" value="Kirghiz SSR" class="mobile-filter-checkbox" /> <span data-translate="republic.kirghiz">Kirghiz SSR</span></label>
          <label><input type="checkbox" name="Soviet republic" value="Latvian SSR" class="mobile-filter-checkbox" /> <span data-translate="republic.latvian">Latvian SSR</span></label>
          <label><input type="checkbox" name="Soviet republic" value="Lithuanian SSR" class="mobile-filter-checkbox" /> <span data-translate="republic.lithuanian">Lithuanian SSR</span></label>
          <label><input type="checkbox" name="Soviet republic" value="Moldavian SSR" class="mobile-filter-checkbox" /> <span data-translate="republic.moldavian">Moldavian SSR</span></label>
          <label><input type="checkbox" name="Soviet republic" value="Russian SFSR" class="mobile-filter-checkbox" /> <span data-translate="republic.russian">Russian SFSR</span></label>
          <label><input type="checkbox" name="Soviet republic" value="Tajik SSR" class="mobile-filter-checkbox" /> <span data-translate="republic.tajik">Tajik SSR</span></label>
          <label><input type="checkbox" name="Soviet republic" value="Turkmen SSR" class="mobile-filter-checkbox" /> <span data-translate="republic.turkmen">Turkmen SSR</span></label>
          <label><input type="checkbox" name="Soviet republic" value="Ukrainian SSR" class="mobile-filter-checkbox" /> <span data-translate="republic.ukrainian">Ukrainian SSR</span></label>
          <label><input type="checkbox" name="Soviet republic" value="Uzbek SSR" class="mobile-filter-checkbox" /> <span data-translate="republic.uzbek">Uzbek SSR</span></label>
        </fieldset>
        <fieldset>
          <legend data-translate="filter.gender">Gender</legend>
          <label><input type="checkbox" name="Gender" value="Male" class="mobile-filter-checkbox" /> <span data-translate="filter.male">Male</span></label>
          <label><input type="checkbox" name="Gender" value="Female" class="mobile-filter-checkbox" /> <span data-translate="filter.female">Female</span></label>
        </fieldset>
        <fieldset>
          <legend data-translate="filter.instrumentation">Instrumentation</legend>
          <label><input type="checkbox" name="Instrumentation" value="Unaccompanied" class="mobile-filter-checkbox" /> <span data-translate="filter.unaccompanied">Unaccompanied</span></label>
          <label><input type="checkbox" name="Instrumentation" value="Trumpet and Piano" class="mobile-filter-checkbox" /> <span data-translate="filter.trumpetPiano">Trumpet and Piano</span></label>
          <label><input type="checkbox" name="Instrumentation" value="Cornet Solo" class="mobile-filter-checkbox" /> <span data-translate="filter.cornetSolo">Cornet Solo</span></label>
          <label><input type="checkbox" name="Instrumentation" value="Piccolo Trumpet" class="mobile-filter-checkbox" /> <span data-translate="filter.piccoloTrumpet">Piccolo Trumpet</span></label>
          <label><input type="checkbox" name="Instrumentation" value="Trumpet Duet" class="mobile-filter-checkbox" /> <span data-translate="filter.trumpetDuet">Trumpet Duet</span></label>
          <label><input type="checkbox" name="Instrumentation" value="Trumpet and Orchestra" class="mobile-filter-checkbox" /> <span data-translate="filter.trumpetOrchestra">Trumpet and Orchestra</span></label>
          <label><input type="checkbox" name="Instrumentation" value="Trumpet and Wind Ensemble" class="mobile-filter-checkbox" /> <span data-translate="filter.trumpetWindEnsemble">Trumpet and Wind Ensemble</span></label>
          <label><input type="checkbox" name="Instrumentation" value="Trumpet and String Orchestra" class="mobile-filter-checkbox" /> <span data-translate="filter.trumpetStringOrchestra">Trumpet and String Orchestra</span></label>
          <label><input type="checkbox" name="Instrumentation" value="Trumpet and Brass Band" class="mobile-filter-checkbox" /> <span data-translate="filter.trumpetBrassBand">Trumpet and Brass Band</span></label>
          <label><input type="checkbox" name="Instrumentation" value="Trumpet Ensemble" class="mobile-filter-checkbox" /> <span data-translate="filter.trumpetEnsemble">Trumpet Ensemble</span></label>
          <label><input type="checkbox" name="Instrumentation" value="Mixed Ensemble" class="mobile-filter-checkbox" /> <span data-translate="filter.mixedEnsemble">Mixed Ensemble</span></label>
        </fieldset>
        <fieldset>
          <legend data-translate="filter.type">Type</legend>
          <label><input type="checkbox" name="Type" value="Scherzo" class="mobile-filter-checkbox" /> <span data-translate="filter.scherzo">Scherzo</span></label>
          <label><input type="checkbox" name="Type" value="Cornet solo" class="mobile-filter-checkbox" /> <span data-translate="filter.cornetSolo">Cornet solo</span></label>
          <label><input type="checkbox" name="Type" value="Sonata/Sonatina" class="mobile-filter-checkbox" /> <span data-translate="filter.sonata">Sonata/Sonatina</span></label>
          <label><input type="checkbox" name="Type" value="Concerto/Concertino" class="mobile-filter-checkbox" /> <span data-translate="filter.concerto">Concerto/Concertino</span></label>
          <label><input type="checkbox" name="Type" value="Poem" class="mobile-filter-checkbox" /> <span data-translate="filter.poem">Poem</span></label>
          <label><input type="checkbox" name="Type" value="Concert Piece" class="mobile-filter-checkbox" /> <span data-translate="filter.concertPiece">Concert Piece</span></label>
          <label><input type="checkbox" name="Type" value="Fantasy/variations" class="mobile-filter-checkbox" /> <span data-translate="filter.fantasy">Fantasy/variations</span></label>
        </fieldset>

      </div>
    </div>
  </div>

  <!-- Scripts -->
  <script>
    console.log('Script tag loaded');
    
    // Function to normalize text for accent and umlaut handling
    // Examples: "Dvořák" -> "dvorak", "Müller" -> "muller", "Tchaikovsky" -> "tchaikovsky"
    function normalizeText(text) {
      if (!text || typeof text !== 'string') return '';
      
      return text
        .toLowerCase()
        .normalize('NFD') // Decompose accented characters (é -> e + ´)
        .replace(/[\u0300-\u036f]/g, '') // Remove accent marks (´, `, ^, ~, etc.)
        .replace(/[æ]/g, 'ae') // Nordic æ -> ae
        .replace(/[ø]/g, 'o')  // Nordic ø -> o
        .replace(/[å]/g, 'a')  // Nordic å -> a  
        .replace(/[ß]/g, 'ss') // German ß -> ss
        .replace(/[œ]/g, 'oe') // French œ -> oe
        .replace(/[ł]/g, 'l')  // Polish ł -> l
        .replace(/[ñ]/g, 'n'); // Spanish ñ -> n
    }
    
    // Check if this is a page refresh and clear search parameters
    function clearSearchOnRefresh() {
      // Check if the page was refreshed (has search params but no referrer from our domain)
      const urlParams = new URLSearchParams(window.location.search);
      const hasSearchParams = urlParams.has('q') || Array.from(urlParams.keys()).length > 0;
      
      console.log('Checking for refresh:', {
        hasSearchParams,
        referrer: document.referrer,
        currentUrl: window.location.href,
        searchParams: window.location.search
      });
      
      if (hasSearchParams) {
        const referrer = document.referrer;
        const currentDomain = window.location.origin;
        
        // Multiple ways to detect refresh:
        // 1. No referrer (direct refresh/F5)
        // 2. Referrer is same URL (refresh)
        // 3. Performance navigation type indicates reload
        const isDirectRefresh = !referrer;
        const isSamePageRefresh = referrer === window.location.href;
        const isPerformanceRefresh = window.performance && 
                                   window.performance.navigation && 
                                   window.performance.navigation.type === 1;
        
        if (isDirectRefresh || isSamePageRefresh || isPerformanceRefresh) {
          console.log('Page refresh detected, clearing search parameters', {
            isDirectRefresh,
            isSamePageRefresh,
            isPerformanceRefresh
          });
          
          // Clear URL parameters without page reload
          const newUrl = window.location.pathname;
          window.history.replaceState({}, document.title, newUrl);
          
          // Clear search input
          const searchInput = document.querySelector('input[name="q"]');
          if (searchInput) {
            searchInput.value = '';
          }
          
          // Clear all filter checkboxes
          document.querySelectorAll('input[type="checkbox"]').forEach(cb => {
            cb.checked = false;
          });
          
          return true; // Indicates search was cleared
        }
      }
      return false; // No clearing occurred
    }
    
    document.addEventListener('DOMContentLoaded', function() {
      console.log('DOM Content Loaded - Script is running!');
      
      // Add results-page class to body for footer styling
      document.body.classList.add('results-page');
      
      const centerPanel = document.getElementById('results-list');
      const searchInput = document.querySelector('input[name="q"]');
      const showAllBtn = document.getElementById('show-all-btn');
      const composerDetailsPanel = document.getElementById('composer-details-content');
      
      console.log('centerPanel element:', centerPanel);
      console.log('searchInput element:', searchInput);
      console.log('showAllBtn element:', showAllBtn);
      console.log('composerDetailsPanel element:', composerDetailsPanel);
      
      if (!centerPanel) {
        console.error('Could not find results-list element!');
        return;
      }
      
      // Check for refresh and clear search if needed
      const searchWasCleared = clearSearchOnRefresh();

      let composers = [];
      let currentPage = 1;
      const resultsPerPage = 15;
      let filteredResults = [];
      
      // Listen for language changes and refresh results display
      document.addEventListener('languageChanged', () => {
        console.log('Language changed, refreshing results display');
        if (filteredResults.length > 0) {
          renderResults(filteredResults);
        }
      });
    fetch('/api/sheets')
      .then(res => res.json())
      .then(data => { 
        console.log('Fetched data:', data);
        composers = data.rows; 
        console.log('Composers array:', composers);
        console.log('Number of composers:', composers.length);
        
        // Check if there's a search query from URL and apply it (unless cleared by refresh)
        if (!searchWasCleared) {
          let urlQuery = searchInput ? searchInput.value.trim() : '';
          console.log('URL search query detected:', urlQuery);
          console.log('Search input element:', searchInput);
          console.log('Search input value:', searchInput ? searchInput.value : 'NO INPUT ELEMENT');
          console.log('Current URL:', window.location.href);
          console.log('URL search params:', window.location.search);
          
          // Fallback: if the input value is empty, try to get it from URL params directly
          if (!urlQuery) {
            const urlParams = new URLSearchParams(window.location.search);
            const queryParam = urlParams.get('q');
            if (queryParam && searchInput) {
              console.log('Setting search input value from URL params:', queryParam);
              searchInput.value = queryParam;
              urlQuery = queryParam;
            }
          }
          
          if (urlQuery) {
            console.log('Applying initial search query:', urlQuery);
            updateResults(); // This will apply the search filter
          } else {
            console.log('No search query, showing all results');
            renderResults(composers); // show all initially if no search query
          }
        } else {
          console.log('Search was cleared due to refresh, showing all results');
          renderResults(composers); // show all results after refresh clearing
        }
      })
        .catch(err => console.error('Failed to fetch composers:', err));

      const filters = ['Country','Soviet republic','Gender','Instrumentation','Type'];
      const checkboxMap = {};

      filters.forEach(key => {
        checkboxMap[key] = document.querySelectorAll(`input[name="${key}"]`);
        console.log(`Found ${checkboxMap[key].length} checkboxes for ${key}`);
        checkboxMap[key].forEach((cb, index) => {
          cb.addEventListener('change', () => {
            console.log(`Filter checkbox changed: ${key} - ${cb.value} - ${cb.checked}`);
            
            // Clear the search input when a filter is changed
            if (searchInput) {
              searchInput.value = '';
              console.log('Search input cleared due to filter change');
            }
            
            clearComposerDetails(); // Clear composer details when filter changes
            updateResults(); // Then update the results
          });
        });
      });

      searchInput.addEventListener('input', updateResults);

      // Function to translate instrumentation values
      function translateInstrumentation(instrumentation) {
        if (!instrumentation || instrumentation === '—') return instrumentation;
        
        const instrumentationMap = {
          'Trumpet and Piano': 'filter.trumpetPiano',
          'Unaccompanied': 'filter.unaccompanied',
          'Cornet Solo': 'filter.cornetSolo',
          'Piccolo Trumpet': 'filter.piccoloTrumpet',
          'Trumpet Duet': 'filter.trumpetDuet',
          'Trumpet and Orchestra': 'filter.trumpetOrchestra',
          'Trumpet and Wind Ensemble': 'filter.trumpetWindEnsemble',
          'Trumpet and String Orchestra': 'filter.trumpetStringOrchestra',
          'Trumpet and Brass Band': 'filter.trumpetBrassBand',
          'Trumpet Ensemble': 'filter.trumpetEnsemble',
          'Mixed Ensemble': 'filter.mixedEnsemble'
        };
        
        // Handle multiple instrumentations separated by semicolon
        if (instrumentation.includes(';')) {
          return instrumentation.split(';').map(inst => {
            const trimmed = inst.trim();
            const translationKey = instrumentationMap[trimmed];
            return translationKey && window.LanguageManager ? 
              window.LanguageManager.getTranslation(translationKey) : trimmed;
          }).join('; ');
        }
        
        const translationKey = instrumentationMap[instrumentation];
        return translationKey && window.LanguageManager ? 
          window.LanguageManager.getTranslation(translationKey) : instrumentation;
      }

      // Function to translate Soviet Republic values
      function translateRepublic(republic) {
        if (!republic || republic === '—') return republic;
        
        const republicMap = {
          'Armenian SSR': 'republic.armenian',
          'Azerbaijan SSR': 'republic.azerbaijan',
          'Byelorussian SSR': 'republic.byelorussian',
          'Estonian SSR': 'republic.estonian',
          'Georgian SSR': 'republic.georgian',
          'Kazakh SSR': 'republic.kazakh',
          'Kirghiz SSR': 'republic.kirghiz',
          'Latvian SSR': 'republic.latvian',
          'Lithuanian SSR': 'republic.lithuanian',
          'Moldavian SSR': 'republic.moldavian',
          'Russian SFSR': 'republic.russian',
          'Tajik SSR': 'republic.tajik',
          'Turkmen SSR': 'republic.turkmen',
          'Ukrainian SSR': 'republic.ukrainian',
          'Uzbek SSR': 'republic.uzbek'
        };
        
        const translationKey = republicMap[republic];
        return translationKey && window.LanguageManager ? 
          window.LanguageManager.getTranslation(translationKey) : republic;
      }

      // Function to clear composer details panel
      function clearComposerDetails() {
        console.log('clearComposerDetails called');
        if (composerDetailsPanel) {
          console.log('Clearing composer details panel');
          const selectText = window.LanguageManager ? window.LanguageManager.getTranslation('composer.select') : 'Select a piece or composer to see more details here.';
          composerDetailsPanel.innerHTML = `<p data-translate="composer.select">${selectText}</p>`;
        } else {
          console.log('composerDetailsPanel not found');
        }
        
        // Reset the main header back to default text
        const composerDetailsHeader = document.querySelector('.composer-details-header');
        if (composerDetailsHeader) {
          const defaultHeaderText = window.LanguageManager ? window.LanguageManager.getTranslation('composer.details') : 'Additional Info';
          composerDetailsHeader.textContent = defaultHeaderText;
          composerDetailsHeader.setAttribute('data-translate', 'composer.details');
        }
        
        // Hide the information boxes
        const composerInfoBox = document.getElementById('composer-info-box');
        const pieceInfoBox = document.getElementById('piece-info-box');
        const morePiecesBox = document.getElementById('more-pieces-box');
        
        if (composerInfoBox) composerInfoBox.style.display = 'none';
        if (pieceInfoBox) pieceInfoBox.style.display = 'none';
        if (morePiecesBox) morePiecesBox.style.display = 'none';
        
        // Show the default message again
        const composerDetailsContent = document.getElementById('composer-details-content');
        if (composerDetailsContent) {
          composerDetailsContent.style.display = 'block';
        }
        
        // Move help text back to original position (below default message)
        const helpText = document.getElementById('help-text');
        const composerDetails = document.querySelector('.composer-details');
        if (helpText && composerDetails) {
          // Remove help text from current position
          helpText.remove();
          // Find the composer-details-content and insert help text after it
          const composerDetailsContent = document.getElementById('composer-details-content');
          if (composerDetailsContent && composerDetailsContent.parentNode) {
            composerDetailsContent.parentNode.insertBefore(helpText, composerDetailsContent.nextSibling);
          }
        }
        
        // Also clear the composer details from the top info box
        const additionalInfoContent = document.getElementById('additional-info-content');
        if (additionalInfoContent) {
          const placeholderText = window.LanguageManager ? window.LanguageManager.getTranslation('composer.select') : 'Select a piece to see details about a composer.';
          additionalInfoContent.innerHTML = `<p style="margin: 0.3rem 0; color: #666; font-size: 0.95rem;">${placeholderText}</p>`;
        }
        
        // Clear the second box (piece details)
        const secondaryInfoContent = document.getElementById('secondary-info-content');
        if (secondaryInfoContent) {
          secondaryInfoContent.innerHTML = '<p style="margin: 0.3rem 0; color: #666; font-size: 0.95rem;">Select a piece to see more information.</p>';
        }
        
        // Clear the third box (other pieces)
        const tertiaryInfoContent = document.getElementById('tertiary-info-content');
        if (tertiaryInfoContent) {
          tertiaryInfoContent.innerHTML = '<p style="margin: 0.3rem 0; color: #666; font-size: 0.95rem;">Other pieces will appear here.</p>';
        }
        
        // Reset global variables
        window.currentDisplayedPiece = null;
        window.currentComposerPieces = null;
      }

      function showComposerDetails(composer) {
        console.log('UPDATED - Showing details for:', composer);
        console.log('Available fields:', Object.keys(composer));
        console.log('Soviet Republic value:', `"${composer["Soviet Republic"]}"`);
        console.log('Gender value:', `"${composer.Gender}"`);
        console.log('Type value:', `"${composer.Type}"`);
        console.log('All field names:');
        Object.keys(composer).forEach(key => console.log(`"${key}": "${composer[key]}"`));
        
        if (!composer) {
          composerDetailsPanel.innerHTML = '<p>Select a piece or composer to see details here.</p>';
          return;
        }
        
        // Create composer details content using actual field mappings
        const currentLang = window.LanguageManager ? window.LanguageManager.currentLang : 'en';
        
        // Determine which name to show at top and which to show in language fields
        let topName, russianFieldName, englishFieldName;
        if (currentLang === 'ru' && composer["Композитор"]) {
          // Russian interface: show Russian name at top, English name in "English:" field
          topName = composer["Композитор"];
          englishFieldName = composer.Composer;
          russianFieldName = "—"; // Don't repeat Russian name in Russian field
        } else {
          // English/German interface: show English name at top, Russian name in "Russian:" field
          topName = composer.Composer;
          englishFieldName = "—"; // Don't show English field for non-Russian interface
          russianFieldName = composer["Композитор"] || "—";
        }
        
        const detailsHTML = `
          <div class="composer-details-content">
            <h3>${topName}</h3>
            <p class="lifespan"><em>1923-1986</em></p>
            <br>
            ${currentLang === 'ru' && englishFieldName !== "—" ? `<p><b><span data-translate="composer.english">English</span>:</b> ${englishFieldName}</p>` : ''}
            ${currentLang !== 'ru' && russianFieldName !== "—" ? `<p><b><span data-translate="composer.russian">Russian</span>:</b> ${russianFieldName}</p>` : ''}
            ${composer.Language && composer.Native ? `<p><b><span class="native-language-label" data-language="${composer.Language || ''}" data-sprache="${composer.Sprache || ''}" data-yazyk="${composer['язык'] || ''}">${composer.Language}</span>:</b> ${composer.Native}</p>` : ''}
            ${composer.X ? `<p><b>${composer.Y || "Native"}:</b> ${composer.X}</p>` : ''}
            <br>
            <p><b><span data-translate="composer.country">Country</span>:</b> <span class="country-value" data-country="${composer.Country || ""}">${composer.Country || "—"}</span></p>
            <p><b><span data-translate="composer.republic">Soviet Republic</span>:</b> <span class="republic-value" data-republic="${composer["Soviet republic"] || ""}">${translateRepublic(composer["Soviet republic"] || "—")}</span></p>
            <br>
            <p><b><span data-translate="composer.gender">Gender</span>:</b> <span class="gender-value" data-gender="${composer.Gender || ""}">${composer.Gender || "—"}</span></p>
            ${composer.Notes && composer.Notes.trim() ? `<p><b><span data-translate="composer.notes">Notes</span>:</b> ${composer.Notes}</p>` : ''}
          </div>
        `;
        
        // Show in desktop panel or mobile overlay depending on screen size
        if (window.innerWidth <= 768) {
          // Mobile: Show in overlay
          const mobileOverlay = document.getElementById('mobile-overlay');
          const mobileDetailsContent = document.getElementById('mobile-composer-details');
          
          if (mobileOverlay && mobileDetailsContent) {
            // Hide the default message and show the boxes
            const defaultMessage = mobileDetailsContent.querySelector('p');
            if (defaultMessage) defaultMessage.style.display = 'none';
            
            // Show mobile information boxes
            const mobileComposerBox = document.getElementById('mobile-composer-info-box');
            const mobilePieceBox = document.getElementById('mobile-piece-info-box');
            const mobileMorePiecesBox = document.getElementById('mobile-more-pieces-box');
            const mobileHelpText = document.getElementById('mobile-help-text');
            
            if (mobileComposerBox) mobileComposerBox.style.display = 'block';
            if (mobilePieceBox) mobilePieceBox.style.display = 'block';
            if (mobileMorePiecesBox) mobileMorePiecesBox.style.display = 'block';
            if (mobileHelpText) mobileHelpText.style.display = 'block';
            
            // Populate mobile composer box
            const mobileAdditionalInfoContent = document.getElementById('mobile-additional-info-content');
            if (mobileAdditionalInfoContent) {
              mobileAdditionalInfoContent.innerHTML = detailsHTML;
            }
            
            // Populate mobile piece box with piece details
            const mobileSecondaryInfoContent = document.getElementById('mobile-secondary-info-content');
            if (mobileSecondaryInfoContent) {
              // Determine which title column to use based on language
              let pieceTitle;
              if (currentLang === 'de') {
                pieceTitle = composer.Titel || composer.Title || composer.Piece || 'Untitled';
              } else if (currentLang === 'ru') {
                pieceTitle = composer["Заголовок"] || composer.Title || composer.Piece || 'Untitled';
              } else {
                pieceTitle = composer.Title || composer.Piece || 'Untitled';
              }
              
              const pieceYear = composer.Year || '—';
              const pieceInstrumentation = translateInstrumentation(composer.Instrumentation || '—');
              const pieceSource = composer.Source || '—';
              const pieceIMSLP = composer.IMSLP || '';
              const pieceNotes = composer.Notes && composer.Notes.trim() ? composer.Notes : '—';
              
              let mobilePieceDetailsHTML = `
                <h4 style="margin: 0 0 0.5rem 0; color: #800000; font-size: 1.1rem;">${pieceTitle}</h4>
                <p style="margin: 0.2rem 0;"><b><span data-translate="composer.year">Year</span>:</b> ${pieceYear}</p>
                <p style="margin: 0.2rem 0;"><b><span data-translate="composer.instrumentation">Instrumentation</span>:</b> ${pieceInstrumentation}</p>
                <p style="margin: 0.2rem 0;"><b><span data-translate="composer.source">Source</span>:</b> ${pieceSource}</p>
              `;
              
              if (pieceIMSLP && pieceIMSLP.trim()) {
                // Check if IMSLP content is a URL and make it clickable
                let imslpContent = pieceIMSLP;
                if (pieceIMSLP.startsWith('http://') || pieceIMSLP.startsWith('https://')) {
                  imslpContent = `<a href="${pieceIMSLP}" target="_blank" rel="noopener noreferrer" style="color: #800000; text-decoration: underline;">${window.LanguageManager.getTranslation('composer.link')}</a>`;
                }
                mobilePieceDetailsHTML += `<p style="margin: 0.2rem 0;"><b><span data-translate="composer.imslp">IMSLP</span>:</b> ${imslpContent}</p>`;
              }
              
              mobilePieceDetailsHTML += `<p style="margin: 0.2rem 0;"><b><span data-translate="composer.notes">Notes</span>:</b> ${pieceNotes}</p>`;
              
              mobileSecondaryInfoContent.innerHTML = mobilePieceDetailsHTML;
            }
            
            // Populate mobile third box with other pieces
            const mobileTertiaryInfoContent = document.getElementById('mobile-tertiary-info-content');
            if (mobileTertiaryInfoContent && composers && composers.length > 0) {
              const otherPieces = composers.filter(piece => 
                piece.Composer === composer.Composer && 
                piece !== composer
              );
              
              if (otherPieces.length > 0) {
                let mobileOtherPiecesHTML = '<div style="font-size: 0.9rem;">';
                otherPieces.forEach((piece, index) => {
                  let pieceTitle;
                  if (currentLang === 'de') {
                    pieceTitle = piece.Titel || piece.Title || piece.Piece || 'Untitled';
                  } else if (currentLang === 'ru') {
                    pieceTitle = piece["Заголовок"] || piece.Title || piece.Piece || 'Untitled';
                  } else {
                    pieceTitle = piece.Title || piece.Piece || 'Untitled';
                  }
                  
                  const pieceYear = piece.Year ? ` (${piece.Year})` : '';
                  const pieceType = piece.Type ? ` - ${piece.Type}` : '';
                  mobileOtherPiecesHTML += `<p style="margin: 0.2rem 0; padding: 0.3rem; background: #f8f8f8; border-radius: 4px; border-left: 3px solid #800000;">${pieceTitle}${pieceYear}${pieceType}</p>`;
                });
                mobileOtherPiecesHTML += '</div>';
                mobileTertiaryInfoContent.innerHTML = mobileOtherPiecesHTML;
              } else {
                const noPiecesText = window.LanguageManager ? window.LanguageManager.getTranslation('composer.noPieces') : 'No other pieces found for this composer.';
                mobileTertiaryInfoContent.innerHTML = `<p style="margin: 0.3rem 0; color: #666; font-size: 0.95rem;">${noPiecesText}</p>`;
              }
            }
            
            mobileOverlay.classList.add('show');
            
            // Translate the newly added content
            if (window.LanguageManager) {
              window.LanguageManager.translateComposerDetails(window.LanguageManager.currentLang);
            }
          }
        } else {
          // Desktop: Show in first information box (Composer box)
          const additionalInfoContent = document.getElementById('additional-info-content');
          if (additionalInfoContent) {
            additionalInfoContent.innerHTML = detailsHTML;
          }
          
          // Show the information boxes
          const composerInfoBox = document.getElementById('composer-info-box');
          const pieceInfoBox = document.getElementById('piece-info-box');
          const morePiecesBox = document.getElementById('more-pieces-box');
          
          if (composerInfoBox) composerInfoBox.style.display = 'block';
          if (pieceInfoBox) pieceInfoBox.style.display = 'block';
          if (morePiecesBox) morePiecesBox.style.display = 'block';
          
          // Hide the default message
          const composerDetailsContent = document.getElementById('composer-details-content');
          if (composerDetailsContent) {
            composerDetailsContent.style.display = 'none';
          }
          
          // Move help text below the third box
          const helpText = document.getElementById('help-text');
          if (helpText && morePiecesBox && morePiecesBox.parentNode) {
            // Remove help text from current position
            helpText.remove();
            // Insert it after the third box
            morePiecesBox.parentNode.insertBefore(helpText, morePiecesBox.nextSibling);
          }
          
          // Update the main header with the composer's name
          const composerDetailsHeader = document.querySelector('.composer-details-header');
          if (composerDetailsHeader) {
            composerDetailsHeader.textContent = topName;
          }
          
          // Populate the second box with piece details
          const secondaryInfoContent = document.getElementById('secondary-info-content');
          if (secondaryInfoContent) {
            // Determine which title column to use based on language
            let pieceTitle;
            if (currentLang === 'de') {
              pieceTitle = composer.Titel || composer.Title || composer.Piece || 'Untitled'; // German title from "Titel" field
            } else if (currentLang === 'ru') {
              pieceTitle = composer["Заголовок"] || composer.Title || composer.Piece || 'Untitled'; // Russian title from "Заголовок" field
            } else {
              pieceTitle = composer.Title || composer.Piece || 'Untitled'; // English title from "Title" field
            }
            
            const pieceYear = composer.Year || '—';
            const pieceInstrumentation = translateInstrumentation(composer.Instrumentation || '—');
            const pieceSource = composer.Source || '—';
            const pieceIMSLP = composer.IMSLP || '';
            const pieceNotes = composer.Notes && composer.Notes.trim() ? composer.Notes : '—';
            
            let pieceDetailsHTML = `
              <h4 style="margin: 0 0 0.5rem 0; color: #800000; font-size: 1.1rem;">${pieceTitle}</h4>
              <p style="margin: 0.2rem 0;"><b><span data-translate="composer.year">Year</span>:</b> ${pieceYear}</p>
              <p style="margin: 0.2rem 0;"><b><span data-translate="composer.instrumentation">Instrumentation</span>:</b> ${pieceInstrumentation}</p>
              <p style="margin: 0.2rem 0;"><b><span data-translate="composer.source">Source</span>:</b> ${pieceSource}</p>
            `;
            
            // Only include IMSLP line if there's content
            if (pieceIMSLP && pieceIMSLP.trim()) {
              // Check if IMSLP content is a URL and make it clickable
              let imslpContent = pieceIMSLP;
              if (pieceIMSLP.startsWith('http://') || pieceIMSLP.startsWith('https://')) {
                imslpContent = `<a href="${pieceIMSLP}" target="_blank" rel="noopener noreferrer" style="color: #800000; text-decoration: underline;">${window.LanguageManager.getTranslation('composer.link')}</a>`;
              }
              pieceDetailsHTML += `<p style="margin: 0.2rem 0;"><b><span data-translate="composer.imslp">IMSLP</span>:</b> ${imslpContent}</p>`;
            }
            
            pieceDetailsHTML += `<p style="margin: 0.2rem 0;"><b><span data-translate="composer.notes">Notes</span>:</b> ${pieceNotes}</p>`;
            
            secondaryInfoContent.innerHTML = pieceDetailsHTML;
            
            // Translate the newly added content in the second box
            if (window.LanguageManager) {
              window.LanguageManager.translateComposerDetails(window.LanguageManager.currentLang);
            }
          }
          
          // Find and display other pieces by the same composer in the third box
          const tertiaryInfoContent = document.getElementById('tertiary-info-content');
          if (tertiaryInfoContent && composers && composers.length > 0) {
            // Find other pieces by the same composer (matching on Composer field)
            const otherPieces = composers.filter(piece => 
              piece.Composer === composer.Composer && 
              piece !== composer // Exclude the current piece
            );
            
            // Store the current piece for swapping functionality
            window.currentDisplayedPiece = composer;
            window.currentComposerPieces = composers.filter(piece => piece.Composer === composer.Composer);
            
            if (otherPieces.length > 0) {
              let otherPiecesHTML = '<div style="font-size: 0.9rem;">';
              otherPieces.forEach((piece, index) => {
                // Determine which title column to use based on language
                let pieceTitle;
                if (currentLang === 'de') {
                  pieceTitle = piece.Titel || piece.Title || piece.Piece || 'Untitled'; // German title from "Titel" field
                } else if (currentLang === 'ru') {
                  pieceTitle = piece["Заголовок"] || piece.Title || piece.Piece || 'Untitled'; // Russian title from "Заголовок" field
                } else {
                  pieceTitle = piece.Title || piece.Piece || 'Untitled'; // English title from "Title" field
                }
                
                const pieceYear = piece.Year ? ` (${piece.Year})` : '';
                const pieceType = piece.Type ? ` - ${piece.Type}` : '';
                otherPiecesHTML += `<p data-piece-index="${index}" style="margin: 0.2rem 0; padding: 0.3rem; background: #f8f8f8; border-radius: 4px; border-left: 3px solid #800000; cursor: pointer; transition: background-color 0.2s;" onmouseover="this.style.backgroundColor='#e8e8e8'" onmouseout="this.style.backgroundColor='#f8f8f8'">${pieceTitle}${pieceYear}${pieceType}</p>`;
              });
              otherPiecesHTML += '</div>';
              tertiaryInfoContent.innerHTML = otherPiecesHTML;
              
              // Add click event listeners to each piece
              const pieceElements = tertiaryInfoContent.querySelectorAll('p[data-piece-index]');
              pieceElements.forEach((element, index) => {
                element.addEventListener('click', function() {
                  const clickedPiece = otherPieces[index];
                  if (clickedPiece && window.currentDisplayedPiece) {
                    // Update the second box with the clicked piece
                    updatePieceDetails(clickedPiece);
                    
                    // Swap the pieces: move current piece back to third box, clicked piece to second box
                    const previousPiece = window.currentDisplayedPiece;
                    window.currentDisplayedPiece = clickedPiece;
                    
                    // Regenerate the third box with the updated list (now including the previous piece)
                    const newOtherPieces = window.currentComposerPieces.filter(piece => piece !== clickedPiece);
                    updateThirdBox(newOtherPieces, currentLang);
                  }
                });
              });
            } else {
              const noPiecesText = window.LanguageManager ? window.LanguageManager.getTranslation('composer.noPieces') : 'No other pieces found for this composer.';
              tertiaryInfoContent.innerHTML = `<p style="margin: 0.3rem 0; color: #666; font-size: 0.95rem;">${noPiecesText}</p>`;
            }
          }
          
          // Clear the main composer details panel
          composerDetailsPanel.innerHTML = '<p data-translate="composer.select">Select a piece or composer to see more details here.</p>';
          
          // Translate the newly added content
          if (window.LanguageManager) {
            window.LanguageManager.translateComposerDetails(window.LanguageManager.currentLang);
          }
        }
      }

      // Function to update piece details in the second box
      function updatePieceDetails(piece) {
        const secondaryInfoContent = document.getElementById('secondary-info-content');
        if (secondaryInfoContent) {
          const currentLang = window.LanguageManager ? window.LanguageManager.currentLang : 'en';
          
          // Determine which title column to use based on language
          let pieceTitle;
          if (currentLang === 'de') {
            pieceTitle = piece.Titel || piece.Title || piece.Piece || 'Untitled'; // German title from "Titel" field
          } else if (currentLang === 'ru') {
            pieceTitle = piece["Заголовок"] || piece.Title || piece.Piece || 'Untitled'; // Russian title from "Заголовок" field
          } else {
            pieceTitle = piece.Title || piece.Piece || 'Untitled'; // English title from "Title" field
          }
          
          const pieceYear = piece.Year || '—';
          const pieceInstrumentation = translateInstrumentation(piece.Instrumentation || '—');
          const pieceSource = piece.Source || '—';
          const pieceIMSLP = piece.IMSLP || '';
          const pieceNotes = piece.Notes && piece.Notes.trim() ? piece.Notes : '—';
          
          let pieceDetailsHTML = `
            <h4 style="margin: 0 0 0.5rem 0; color: #800000; font-size: 1.1rem;">${pieceTitle}</h4>
            <p style="margin: 0.2rem 0;"><b><span data-translate="composer.year">Year</span>:</b> ${pieceYear}</p>
            <p style="margin: 0.2rem 0;"><b><span data-translate="composer.instrumentation">Instrumentation</span>:</b> ${pieceInstrumentation}</p>
            <p style="margin: 0.2rem 0;"><b><span data-translate="composer.source">Source</span>:</b> ${pieceSource}</p>
          `;
          
          // Only include IMSLP line if there's content
          if (pieceIMSLP && pieceIMSLP.trim()) {
            // Check if IMSLP content is a URL and make it clickable
            let imslpContent = pieceIMSLP;
            if (pieceIMSLP.startsWith('http://') || pieceIMSLP.startsWith('https://')) {
              const linkText = window.LanguageManager ? window.LanguageManager.getTranslation('composer.link') : 'Link';
              imslpContent = `<a href="${pieceIMSLP}" target="_blank" rel="noopener noreferrer" style="color: #800000; text-decoration: underline;">${linkText}</a>`;
            }
            pieceDetailsHTML += `<p style="margin: 0.2rem 0;"><b><span data-translate="composer.imslp">IMSLP</span>:</b> ${imslpContent}</p>`;
          }
          
          pieceDetailsHTML += `<p style="margin: 0.2rem 0;"><b><span data-translate="composer.notes">Notes</span>:</b> ${pieceNotes}</p>`;
          
          secondaryInfoContent.innerHTML = pieceDetailsHTML;
          
          // Translate the newly added content
          if (window.LanguageManager) {
            window.LanguageManager.translateComposerDetails(window.LanguageManager.currentLang);
          }
        }
      }

      // Function to update the third box with a new list of pieces
      function updateThirdBox(pieces, currentLang) {
        const tertiaryInfoContent = document.getElementById('tertiary-info-content');
        if (!tertiaryInfoContent) return;
        
        if (pieces.length > 0) {
          let otherPiecesHTML = '<div style="font-size: 0.9rem;">';
          pieces.forEach((piece, index) => {
            // Determine which title column to use based on language
            let pieceTitle;
            if (currentLang === 'de') {
              pieceTitle = piece.Titel || piece.Title || piece.Piece || 'Untitled';
            } else if (currentLang === 'ru') {
              pieceTitle = piece["Заголовок"] || piece.Title || piece.Piece || 'Untitled';
            } else {
              pieceTitle = piece.Title || piece.Piece || 'Untitled';
            }
            
            const pieceYear = piece.Year ? ` (${piece.Year})` : '';
            const pieceType = piece.Type ? ` - ${piece.Type}` : '';
            otherPiecesHTML += `<p data-piece-index="${index}" style="margin: 0.2rem 0; padding: 0.3rem; background: #f8f8f8; border-radius: 4px; border-left: 3px solid #800000; cursor: pointer; transition: background-color 0.2s;" onmouseover="this.style.backgroundColor='#e8e8e8'" onmouseout="this.style.backgroundColor='#f8f8f8'">${pieceTitle}${pieceYear}${pieceType}</p>`;
          });
          otherPiecesHTML += '</div>';
          tertiaryInfoContent.innerHTML = otherPiecesHTML;
          
          // Add click event listeners to each piece
          const pieceElements = tertiaryInfoContent.querySelectorAll('p[data-piece-index]');
          pieceElements.forEach((element, index) => {
            element.addEventListener('click', function() {
              const clickedPiece = pieces[index];
              if (clickedPiece && window.currentDisplayedPiece) {
                // Update the second box with the clicked piece
                updatePieceDetails(clickedPiece);
                
                // Swap the pieces: move current piece back to third box, clicked piece to second box
                const previousPiece = window.currentDisplayedPiece;
                window.currentDisplayedPiece = clickedPiece;
                
                // Regenerate the third box with the updated list (now including the previous piece)
                const newOtherPieces = window.currentComposerPieces.filter(piece => piece !== clickedPiece);
                updateThirdBox(newOtherPieces, currentLang);
              }
            });
          });
        } else {
          const noPiecesText = window.LanguageManager ? window.LanguageManager.getTranslation('composer.noPieces') : 'No other pieces found for this composer.';
          tertiaryInfoContent.innerHTML = `<p style="margin: 0.3rem 0; color: #666; font-size: 0.95rem;">${noPiecesText}</p>`;
        }
      }

      function updateResults() {
        console.log('updateResults called');
        let filtered = composers;

        // Filter by checkboxes
        filters.forEach(key => {
          const selected = Array.from(checkboxMap[key])
                                .filter(c => c.checked)
                                .map(c => c.value);
          if(selected.length>0){
            console.log(`Filtering by ${key}:`, selected);
            console.log(`Sample data values for ${key}:`, composers.slice(0,10).map(c => `"${c[key]}"`));
            const beforeFilter = filtered.length;
            
            filtered = filtered.filter(c => selected.includes(c[key]));
            
            console.log(`${key} filter: ${beforeFilter} -> ${filtered.length} results`);
          }
        });

        // Filter by search text with normalization
        const query = searchInput ? searchInput.value.trim() : '';
        console.log('Search query being applied:', query);
        if(query){
          const beforeSearch = filtered.length;
          const normalizedQuery = normalizeText(query);
          console.log('Normalized query:', normalizedQuery);
          
          filtered = filtered.filter(c => {
            const normalizedComposer = normalizeText(c.Composer);
            const normalizedComposerRU = normalizeText(c['Композитор'] || '');
            const normalizedTitle = normalizeText(c.Title || '');
            const normalizedTitelDE = normalizeText(c.Titel || '');
            const normalizedTitleRU = normalizeText(c['Заголовок'] || '');
            
            return normalizedComposer.includes(normalizedQuery) || 
                   normalizedComposerRU.includes(normalizedQuery) ||
                   normalizedTitle.includes(normalizedQuery) ||
                   normalizedTitelDE.includes(normalizedQuery) ||
                   normalizedTitleRU.includes(normalizedQuery);
          });
          
          console.log(`Search filter: ${beforeSearch} -> ${filtered.length} results for query "${query}" (normalized: "${normalizedQuery}")`);
        }

        renderResults(filtered);
      }

      function renderResults(filtered) {
        console.log('renderResults called with:', filtered.length, 'items');
        filteredResults = filtered;
        currentPage = 1; // Reset to first page when new results come in
        
        // Add updating animation
        const resultsContainer = centerPanel.parentElement;
        if (resultsContainer) {
          resultsContainer.classList.add('results-updating');
        }
        
        // Slight delay to show the updating state
        setTimeout(() => {
          if(filtered.length===0){
            const noResultsText = window.LanguageManager ? window.LanguageManager.getTranslation('results.noResults') : 'No music found for selected filters.';
            const helpText = window.LanguageManager ? window.LanguageManager.getTranslation('results.helpExpand') : 'You can help by expanding it';
            centerPanel.innerHTML=`<p>${noResultsText}</p><p><a href="/submit" style="color: #800000; text-decoration: underline; cursor: pointer;">${helpText}</a></p>`;
          } else {
            renderPage();
          }
          
          // Show results updated animation
          if (resultsContainer) {
            resultsContainer.classList.remove('results-updating');
            resultsContainer.classList.add('results-updated');
            
            // Remove the animation class after it completes
            setTimeout(() => {
              resultsContainer.classList.remove('results-updated');
            }, 600);
          }
        }, 150);
      }

      function renderPage() {
        const startIndex = (currentPage - 1) * resultsPerPage;
        const endIndex = startIndex + resultsPerPage;
        const pageResults = filteredResults.slice(startIndex, endIndex);
        const totalPages = Math.ceil(filteredResults.length / resultsPerPage);

        // Render current page of results
        const htmlContent = pageResults.map(c=>{
          // Get title based on current language
          let displayTitle = '';
          const currentLang = window.LanguageManager ? window.LanguageManager.currentLang : 'en';
          if (currentLang === 'de' && c.Titel) {
            displayTitle = c.Titel; // German title
          } else if (currentLang === 'ru' && c['Заголовок']) {
            displayTitle = c['Заголовок']; // Russian title
          } else {
            displayTitle = c.Title || 'Untitled'; // English fallback
          }
          
          // Get composer name based on current language
          let displayComposer = '';
          if (currentLang === 'ru' && c['Композитор']) {
            displayComposer = c['Композитор']; // Russian composer name
          } else {
            displayComposer = c.Composer; // English/German use English name
          }
          
          return `
            <div class="song-card">
              <div class="song-title">${displayTitle}</div>
              <div class="song-composer">${displayComposer}</div>
              ${c.Year ? `<div class="song-year">${c.Year}</div>` : ''}
            </div>
          `;
        }).join('');
        
        // Add pagination controls
        const paginationHTML = `
          <div class="pagination-controls" style="display: flex; justify-content: flex-end; align-items: center; gap: 0.5rem; margin-top: 1rem; padding-top: 1rem; border-top: 1px solid #e0e0e0;">
            <span style="font-size: 0.9rem; color: #666;">Page ${currentPage} of ${totalPages} (${filteredResults.length} total)</span>
            <button id="prev-btn" ${currentPage === 1 ? 'disabled' : ''} style="padding: 0.25rem 0.5rem; border: 1px solid #800000; background: ${currentPage === 1 ? '#f0f0f0' : 'white'}; color: ${currentPage === 1 ? '#999' : '#800000'}; border-radius: 4px; cursor: ${currentPage === 1 ? 'not-allowed' : 'pointer'};">Previous</button>
            <button id="next-btn" ${currentPage === totalPages ? 'disabled' : ''} style="padding: 0.25rem 0.5rem; border: 1px solid #800000; background: ${currentPage === totalPages ? '#f0f0f0' : 'white'}; color: ${currentPage === totalPages ? '#999' : '#800000'}; border-radius: 4px; cursor: ${currentPage === totalPages ? 'not-allowed' : 'pointer'};">Next</button>
          </div>
        `;
        
        centerPanel.innerHTML = htmlContent + paginationHTML;
        
        // Add click handlers to song cards for composer details
        const songCards = centerPanel.querySelectorAll('.song-card');
        songCards.forEach((card, index) => {
          const originalIndex = startIndex + index;
          card.addEventListener('click', () => showComposerDetails(filteredResults[originalIndex]));
        });

        // Add pagination event listeners
        const prevBtn = document.getElementById('prev-btn');
        const nextBtn = document.getElementById('next-btn');
        
        if (prevBtn && !prevBtn.disabled) {
          prevBtn.addEventListener('click', () => {
            if (currentPage > 1) {
              currentPage--;
              renderPage();
            }
          });
        }
        
        if (nextBtn && !nextBtn.disabled) {
          nextBtn.addEventListener('click', () => {
            if (currentPage < totalPages) {
              currentPage++;
              renderPage();
            }
          });
        }
      }

    // Show All button clears filters and search
      showAllBtn.addEventListener('click', e=>{
        e.preventDefault();
        filters.forEach(key => checkboxMap[key].forEach(cb => cb.checked=false));
        searchInput.value='';
        renderResults(composers);
      });

      // Mobile functionality
      function setupMobileFeatures() {
        if (window.innerWidth <= 768) {
          const filterPanel = document.querySelector('.filter-panel');
          const composerDetails = document.querySelector('.composer-details');
          
          // Mobile filter panel toggle
          if (filterPanel) {
            filterPanel.classList.add('collapsed'); // Start collapsed on mobile
            
            const filterHeader = filterPanel.querySelector('h2');
            if (filterHeader) {
              // Remove existing listener if any
              filterHeader.removeEventListener('click', toggleFilterPanel);
              filterHeader.addEventListener('click', toggleFilterPanel);
            }
          }
          
          // Mobile composer details panel toggle
          if (composerDetails) {
            composerDetails.classList.add('collapsed'); // Start collapsed on mobile
            
            const detailsHeader = composerDetails.querySelector('.composer-details-header');
            if (detailsHeader) {
              // Remove existing listener if any
              detailsHeader.removeEventListener('click', toggleDetailsPanel);
              detailsHeader.addEventListener('click', toggleDetailsPanel);
            }
          }
        } else {
          // Remove mobile classes on desktop
          const filterPanel = document.querySelector('.filter-panel');
          const composerDetails = document.querySelector('.composer-details');
          
          if (filterPanel) {
            filterPanel.classList.remove('collapsed');
          }
          if (composerDetails) {
            composerDetails.classList.remove('collapsed');
          }
        }
      }

      function toggleFilterPanel() {
        const filterPanel = document.querySelector('.filter-panel');
        if (filterPanel) {
          filterPanel.classList.toggle('collapsed');
        }
      }

      function toggleDetailsPanel() {
        const composerDetails = document.querySelector('.composer-details');
        if (composerDetails) {
          composerDetails.classList.toggle('collapsed');
        }
      }

      // Setup mobile features
      setupMobileFeatures();
      
      // Re-setup on window resize
      window.addEventListener('resize', setupMobileFeatures);

      // Mobile overlay functionality
      const mobileOverlay = document.getElementById('mobile-overlay');
      const closeOverlayBtn = document.getElementById('close-overlay');

      // Close overlay when clicking close button
      if (closeOverlayBtn && mobileOverlay) {
        closeOverlayBtn.addEventListener('click', () => {
          mobileOverlay.classList.remove('show');
        });
      }

      // Close overlay when clicking outside content
      if (mobileOverlay) {
        mobileOverlay.addEventListener('click', (e) => {
          if (e.target === mobileOverlay) {
            mobileOverlay.classList.remove('show');
          }
        });
      }

      // Close overlay on escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && mobileOverlay && mobileOverlay.classList.contains('show')) {
          mobileOverlay.classList.remove('show');
        }
        if (e.key === 'Escape' && mobileFilterPanel && mobileFilterPanel.classList.contains('show')) {
          mobileFilterPanel.classList.remove('show');
        }
      });

      // Mobile filter panel functionality
      const mobileFilterBtn = document.getElementById('mobile-filter-btn');
      const mobileFilterPanel = document.getElementById('mobile-filter-panel');
      const closeFilterPanelBtn = document.getElementById('close-filter-panel');

      // Open filter panel when clicking filter button
      if (mobileFilterBtn && mobileFilterPanel) {
        mobileFilterBtn.addEventListener('click', () => {
          mobileFilterPanel.classList.add('show');
        });
      }

      // Close filter panel when clicking close button
      if (closeFilterPanelBtn && mobileFilterPanel) {
        closeFilterPanelBtn.addEventListener('click', () => {
          mobileFilterPanel.classList.remove('show');
        });
      }

      // Close filter panel when clicking outside content
      if (mobileFilterPanel) {
        mobileFilterPanel.addEventListener('click', (e) => {
          if (e.target === mobileFilterPanel) {
            mobileFilterPanel.classList.remove('show');
          }
        });
      }

      // Connect mobile filter checkboxes to main filter system
      const mobileFilterCheckboxes = document.querySelectorAll('.mobile-filter-checkbox');
      mobileFilterCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('change', updateResults);
      });
      
    }); // Close DOMContentLoaded
  </script>

  <style>
    /* Background Images */
    body {
      background-image: url('https://i.imgur.com/ZENogwV.png');
      background-size: cover;
      background-position: center;
      background-attachment: fixed;
      background-repeat: no-repeat;
    }

    /* Mobile background override */
    @media (max-width: 768px) {
      body {
        background-image: url('https://i.imgur.com/vfMSV3G.png');
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
        background-repeat: no-repeat;
      }
    }

    /* Global styles matching SongCard component */
    :global(.song-card) {
      background: white;
      border-radius: 12px;
      padding: 1rem 1.25rem;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
      transition: transform 0.2s ease, box-shadow 0.2s ease;
      cursor: pointer;
      margin-bottom: 1rem;
    }
    
    :global(.song-card:hover) {
      transform: translateY(-5px);
      box-shadow: 0 6px 14px rgba(0, 0, 0, 0.15);
    }
    
    :global(.song-title) {
      font-weight: bold;
      font-size: 1.1rem;
      color: #800000;
      margin-bottom: 0.25rem;
    }
    
    :global(.song-composer) {
      font-size: 1rem;
      color: #333;
      margin-bottom: 0.25rem;
    }
    
    :global(.song-year) {
      font-size: 0.9rem;
      color: #666;
    }
    
    /* Composer Details styles matching ComposerDetails component */
    .composer-details {
      background: white;
      border-radius: 12px;
      padding: 1.5rem;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      flex: 1;
      min-height: 300px;
    }
    
    .additional-info-box {
      background: #f8f9fa;
      border-radius: 8px;
      padding: 1rem;
      margin-top: 1.5rem;
      border-left: 4px solid #800000;
      border: 1px solid rgba(0,0,0,0.1);
    }
    
    .additional-info-header {
      color: #800000;
      font-weight: bold;
      font-size: 1rem;
      margin-bottom: 0.75rem;
      padding-bottom: 0.25rem;
      border-bottom: 1px solid rgba(128, 0, 0, 0.2);
    }
    
    .composer-details-header {
      color: #800000;
      font-weight: bold;
      font-size: 1.1rem;
      margin-bottom: 1rem;
    }
    
    :global(.composer-details-content h3) {
      color: #800000;
      margin: 0;
      font-size: 1.2rem;
    }
    
    :global(.composer-details-content .lifespan) {
      color: gray;
      font-size: 0.9rem;
      margin-top: 0.2rem;
      margin-bottom: 1rem;
    }
    
    :global(.composer-details-content p) {
      margin: 0.3rem 0;
      color: #333;
      font-size: 0.95rem;
    }
    
    /* Filter panel styling */
    .filter-panel {
      background-color: #fafafa;
      border-radius: 12px;
      padding: 1rem;
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      box-shadow: 0 4px 12px rgba(0,0,0,0.05);
      height: 100%;
    }
    
    .filter-panel h2 { 
      margin: 0 0 0.5rem 0; 
      color: #800000; 
      font-size: 1.2rem; 
    }
    
    .filter-panel fieldset {
      border: none;
      padding: 0;
      margin: 0.5rem 0;
    }
    
    .filter-panel legend {
      color: #800000;
      font-size: 1rem;
      font-weight: bold;
      margin-bottom: 0.25rem;
    }
    
    .filter-panel label { 
      display: flex; 
      align-items: center; 
      gap: 0.5rem; 
      cursor: pointer; 
      font-size: 0.95rem; 
      margin: 0.2rem 0;
    }

    /* Mobile responsive styles */
@media (max-width: 768px) {
  /* Hide left and right panels on mobile */
  .left-panel,
  .right-panel {
    display: none !important;
  }

  main {
    padding: 1rem !important;
    gap: 0 !important;
  }

  .center-panel {
    margin: 0 !important;
  }

  /* Search bar container */
  div[style*="background-color: rgba(128,128,128,0.75)"] {
    width: 100% !important;
    box-sizing: border-box;
    height: auto !important;
    padding: 1rem 15px !important;
    display: flex !important;
    justify-content: center;
  }

  /* Make search form flexible */
  div[style*="background-color: rgba(128,128,128,0.75)"] form {
    display: flex !important;
    flex-direction: row !important;
    align-items: center;
    justify-content: space-between;
    width: 100% !important;
    max-width: 600px;
    gap: 0.5rem !important;
    box-sizing: border-box;
  }

  /* Input should take most width */
  div[style*="background-color: rgba(128,128,128,0.75)"] input[type="text"] {
    flex: 1 1 auto;
    min-width: 0;
  }

  /* Search button smaller and tidy */
  div[style*="background-color: rgba(128,128,128,0.75)"] button {
    flex: 0 0 auto;
    width: auto;
    padding: 0.5rem 0.75rem; /* tighter padding */
    font-size: 0.9rem;
    border-radius: 6px;
    white-space: nowrap; /* prevent wrapping */
  }

  #show-all-btn {
    display: none !important;
  }
}

   /* ============================
   Mobile Overlay Styles
============================ */
/* Mobile Overlay Container */
.mobile-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: rgba(0, 0, 0, 0.5); /* semi-transparent background */
  display: flex;
  justify-content: flex-end; /* slide panel from right */
  opacity: 0;                /* initially invisible */
  pointer-events: none;      /* non-interactive when hidden */
  transition: opacity 0.3s ease;
  z-index: 1000;
}

/* Show overlay */
.mobile-overlay.show {
  opacity: 1;
  pointer-events: auto;
}

/* Sliding Panel Content */
.mobile-overlay-content {
  background: white;
  width: 85%;
  max-width: 400px;
  height: 100%;
  box-shadow: -4px 0 20px rgba(0, 0, 0, 0.3);
  display: flex;
  flex-direction: column;

  /* Start off-screen */
  transform: translateX(100%);
  transition: transform 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  overflow-y: auto;
}

/* Slide in when overlay is active */
.mobile-overlay.show .mobile-overlay-content {
  transform: translateX(0);
}

/* Header + Close Button */
.mobile-overlay-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem 1.5rem;
  border-bottom: 1px solid #eee;
  background: #f8f8f8;
  flex-shrink: 0;
}

.mobile-overlay-header h3 {
  margin: 0;
  color: #800000;
  font-size: 1.2rem;
  word-wrap: break-word;
  overflow-wrap: break-word;
}

.close-overlay {
  background: none;
  border: none;
  font-size: 1.5rem;
  color: #800000;
  cursor: pointer;
  padding: 0.5rem;
  line-height: 1;
}

.close-overlay:hover {
  background: rgba(128, 0, 0, 0.1);
  border-radius: 4px;
}

/* Content area inside panel */
.mobile-composer-details {
  padding: 2rem 1rem 2rem 1rem;
  flex: 1;
  overflow-y: auto;
}

.mobile-composer-details .composer-details-content h3 {
  margin-bottom: 1rem;
}

.mobile-composer-details .composer-details-content p {
  margin: 0.5rem 0;
  line-height: 1.5;
}

/* Hide mobile overlay on desktop */
@media (min-width: 769px) {
  .mobile-overlay {
    display: none !important;
  }
}

/* Mobile Toolbar Styles */
.mobile-toolbar {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  background: #800000;
  padding: 1rem 15px;
  display: none;
  justify-content: flex-start;
  z-index: 999;
  box-shadow: 0 -2px 6px rgba(0, 0, 0, 0.1);
}

.mobile-toolbar-btn {
  background: white;
  color: #800000;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 8px;
  font-weight: bold;
  font-size: 1rem;
  cursor: pointer;
  transition: background-color 0.2s ease, transform 0.1s ease;
}

.mobile-toolbar-btn:hover {
  background: #f0f0f0;
}

.mobile-toolbar-btn:active {
  transform: scale(0.98);
}

/* Show toolbar only on mobile */
@media (max-width: 768px) {
  .mobile-toolbar {
    display: flex;
  }
}

/* Mobile Filter Panel Styles */
.mobile-filter-panel {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0);
  z-index: 1001;
  display: block;
  visibility: hidden;
  transition: background-color 0.4s ease, visibility 0.4s ease;
}

.mobile-filter-panel.show {
  background: rgba(0, 0, 0, 0.5);
  visibility: visible;
}

.mobile-filter-content {
  position: absolute;
  top: 0;
  left: 0;
  width: 85%;
  height: 100vh;
  background: white;
  box-shadow: 4px 0 20px rgba(0, 0, 0, 0.3);
  display: flex;
  flex-direction: column;
  transform: translateX(-100%);
  transition: transform 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

.mobile-filter-panel.show .mobile-filter-content {
  transform: translateX(0);
}

.mobile-filter-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem 10px 1rem 1.5rem;
  border-bottom: 1px solid #eee;
  background: #f8f8f8;
  flex-shrink: 0;
}

.mobile-filter-header h3 {
  margin: 0;
  color: #800000;
  font-size: 1.2rem;
}

.close-filter-panel {
  background: none;
  border: none;
  font-size: 1.5rem;
  color: #800000;
  cursor: pointer;
  padding: 0.5rem;
  line-height: 1;
}

.close-filter-panel:hover {
  background: rgba(128, 0, 0, 0.1);
  border-radius: 4px;
}

.mobile-filter-body {
  padding: 1rem 10px 1rem 1rem;
  overflow-y: auto;
  flex: 1;
}

.mobile-filter-body fieldset {
  border: none;
  padding: 0;
  margin: 1rem 0;
}

.mobile-filter-body legend {
  color: #800000;
  font-size: 1rem;
  font-weight: bold;
  margin-bottom: 0.5rem;
}

.mobile-filter-body label {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  cursor: pointer;
  font-size: 0.95rem;
  margin: 0.3rem 0;
  padding: 0.2rem 0;
}

.mobile-filter-checkbox {
  min-width: 18px;
  height: 18px;
}

    /* Hide filter panel on desktop */
    @media (min-width: 769px) {
      .mobile-filter-panel {
        display: none !important;
      }
    }

    /* Results update animation - mobile only */
    @media (max-width: 768px) {
      .results-updating {
        opacity: 0.6;
        transform: scale(0.98);
        transition: opacity 0.3s ease, transform 0.3s ease;
      }

      .results-updated {
        animation: resultsFlash 0.6s ease-out;
      }

      @keyframes resultsFlash {
        0% {
          opacity: 0.6;
          transform: scale(0.98);
          background-color: white;
        }
        50% {
          opacity: 1;
          transform: scale(1.01);
          background-color: rgba(128, 128, 128, 0.1);
          box-shadow: 0 4px 20px rgba(128, 128, 128, 0.3);
        }
        100% {
          opacity: 1;
          transform: scale(1);
          background-color: white;
          box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        }
      }
    }